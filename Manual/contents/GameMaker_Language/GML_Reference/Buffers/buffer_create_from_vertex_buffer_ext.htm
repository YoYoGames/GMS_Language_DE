<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_create_from_vertex_buffer_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_create_from_vertex_buffer_ext" />
  <meta name="rh-index-keywords" content="buffer_create_from_vertex_buffer_ext" />
  <meta name="search-keywords" content="buffer_create_from_vertex_buffer_ext,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_create_from_vertex_buffer_ext</h1>
  <p>Mit dieser Funktion weisen Sie einen Teil des Speichers als Puffer in Ihrem Spiel zu, der mit den Daten eines zuvor erstellten <a href="../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Vertex-Puffers</a> gefüllt wird. Die Funktion gibt eine eindeutige <i>Puffer-ID</i> zurück, die in einer Variablen gespeichert und für alle weiteren Funktionsaufrufe an den Puffer verwendet werden sollte. Die Funktion nimmt die ID für den zu verwendenden Vertex-Puffer (wie von der Funktion <a href="../Drawing/Primitives/vertex_create_buffer.htm"><tt>vertex_create_buffer()</tt></a>,
    zurückgegeben wird), wobei die folgenden Konstanten verwendet werden, um den Puffertyp zu definieren:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Konstant</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td>puffer_fest</td>
        <td>Ein Puffer mit fester Größe.</td>
      </tr>
      <tr>
        <td>puffer_wachsen</td>
        <td>Ein Puffer, der dynamisch &quot;wächst&quot;, wenn Daten hinzugefügt werden</td>
      </tr>
      <tr>
        <td>Puffer_Umschlag</td>
        <td>Ein Puffer, in dem die Daten &quot;umgeschlagen&quot; werden. Wenn die hinzugefügten Daten die Grenze der Puffergröße erreichen, wird das Überschreiben an den Anfang des Puffers zurückgesetzt, und das weitere Schreiben wird von diesem Punkt an fortgesetzt.</td>
      </tr>
      <tr>
        <td>puffer_schnell</td>
        <td>Spezieller &quot;gestrippter&quot; Puffer, der extrem schnell zu lesen/schreiben ist. Kann nur mit <a href="buffer_write.htm">buffer_u8-Datentypen</a> verwendet werden und <i>muss</i> 1 Byte ausgerichtet sein.</td>
      </tr>
      <tr>
        <td>Puffer_vPuffer</td>
        <td>Dieser Puffertyp ist nur als Vertex-Puffer zu verwenden.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Neben dem Puffertyp müssen Sie auch das <i>Byte-Alignment</i> für den Puffer einstellen. Dieser Wert hängt von den Daten ab, die Sie im Puffer speichern möchten, und in den meisten Fällen ist ein Wert von 1 vollkommen in Ordnung. Beachten Sie jedoch, dass
    für einige Operationen eine bestimmte Ausrichtung <i>erforderlich</i> ist und eine falsche Ausrichtung zu Fehlern führen kann (weitere Informationen zur Ausrichtung finden Sie unter <a href="../../../Additional_Information/Guide_To_Using_Buffers.htm">Pufferausrichtung</a>). Die folgende
    ist ein allgemeiner Leitfaden, der zeigt, welche Werte für die einzelnen Datentypen am besten geeignet sind (im Zweifelsfall sollten Sie eine Ausrichtung von 1 verwenden):</p>
  <ul class="colour">
    <li>Strings sollten auf 1 Byte ausgerichtet sein.</li>
    <li>8-Bit-Ganzzahlen mit oder ohne Vorzeichen können auf einen beliebigen Wert ausgerichtet werden, aber beachten Sie, dass für einen schnellen Puffer (siehe <a href="buffer_write.htm"><tt>buffer_write()</tt></a>) auf 1 ausgerichtet sein <i>muss</i>.</li>
    <li>Vorzeichenbehaftete oder vorzeichenlose 16-Bit-Ganzzahlen sollten auf 2 Byte ausgerichtet werden.</li>
    <li>Vorzeichenbehaftete oder vorzeichenlose 32-Bit-Ganzzahlen sollten auf 4 Byte ausgerichtet werden</li>
    <li>Floats mit bis zu 16 Bit sollten auf 2 Byte ausgerichtet werden. <i>(Wird derzeit nicht unterstützt!)</i></li>
    <li>Floats mit bis zu 32 Bit sollten auf 4 Byte ausgerichtet werden.</li>
    <li>Floats mit bis zu 64 Bit sollten auf 8 Byte ausgerichtet werden.</li>
  </ul>
  <p class="note"><b>HINWEIS</b>: Vertex-Puffer sind 1-Byte-ausgerichtet, aber Sie können den Puffer mit einer beliebigen Ausrichtung erstellen, je nachdem, wie Sie die Daten behandeln wollen, da die Vertex-Daten einfach eine Rohspeicherkopie in den Puffer sind.</p>
  <p>Mit den letzten beiden Argumenten geben Sie den Bereich der Scheitelpunktdaten an, den Sie in den neu erstellten Puffer kopieren möchten. Der Start-Scheitelpunkt kann irgendwo zwischen 0 und der Anzahl der Scheitelpunkte -1 liegen, und dann geben Sie die Anzahl der Scheitelpunkte ab diesem Punkt
    zu kopieren. Sie können die Funktion <tt><a href="../Drawing/Primitives/vertex_get_number.htm">vertex_get_number()</a></tt> auf den Scheitelpunktpuffer anwenden, um die Gesamtzahl der gespeicherten Scheitelpunkte zu ermitteln.</p>
  <p class="note"><b>HINWEIS</b>: Es ist wichtig, dass Sie alle dynamisch erstellten Ressourcen wie diese aus dem Speicher entfernen, wenn Sie sie nicht mehr benötigen, um Speicherlecks zu vermeiden; wenn Sie also mit dem erstellten Puffer fertig sind, sollten Sie ihn wieder freigeben
    mit <span style="font-size:1px;"><a href="buffer_delete.htm"><tt style="font-size: 14px">buffer_delete()</tt></a></span>. Beachten Sie auch, dass der Scheitelpunktpuffer, der zum Erstellen des neuen Puffers verwendet wurde, ebenfalls nicht aus dem Speicher entfernt wird, und Sie sollten die Funktion
    <span style="font-size:1px;"><a href="../Drawing/Primitives/vertex_delete_buffer.htm"><tt style="font-size: 14px">vertex_delete_buffer()</tt></a></span> verwenden, wenn er nicht mehr benötigt wird.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td>vertex_buffer</td>
        <td>Der zu verwendende Vertex-Puffer-Index.</td>
      </tr>
      <tr>
        <td>Typ</td>
        <td>Der Typ des zu erstellenden Puffers (siehe die Konstantenliste unten).</td>
      </tr>
      <tr>
        <td>Ausrichtung</td>
        <td>Das Byte-Alignment für den Puffer</td>
      </tr>
      <tr>
        <td>start_vertex</td>
        <td>Der Startscheitelpunkt.</td>
      </tr>
      <tr>
        <td>num_vertices</td>
        <td>Die Gesamtzahl der zu kopierenden Scheitelpunkte.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code">Int (Vertex-Puffer-ID)</p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">var v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);</p>
  <p>Der obige Code weist einem Puffer Speicher zu, kopiert dann die Daten aller Scheitelpunkte aus dem angegebenen Scheitelpunktpuffer in diesen und gibt den Index des neuen Puffers zurück, der in der Variablen &quot;player_buffer&quot; für die zukünftige Verwendung gespeichert wird.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Buffers.htm">Puffer</a></div>
        <div style="float:right">Weiter: <a href="buffer_delete.htm">buffer_delete</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
buffer_create_from_vertex_buffer_ext
buffer_fixed
buffer_grow
buffer_wrap
buffer_fast
buffer_vbuffer
-->
  <!-- TAGS
buffer_create_from_vertex_buffer_ext
-->

</body></html>