<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>ausnahme_unbehandelt_handler</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for exception_unhandled_handler" />
  <meta name="rh-index-keywords" content="exception_unhandled_handler" />
  <meta name="search-keywords" content="exception_unhandled_handler" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>ausnahme_unbehandelt_handler</h1>
  <p>Diese <span class="notranslate">Runtime-Funktion</span> kann verwendet werden, um die <span class="notranslate">Standard-Fehlermeldung</span> des GameMaker <span class="notranslate">Studio 2</span> zu &quot;übernehmen&quot;, wenn eine <span class="notranslate">Runtime-Exception</span> auftritt. Sie liefern eine Methode oder Funktion, die beim Auftreten der Ausnahme aufgerufen wird, und ihr erstes Argument ist eine struct
    sein, die Informationen über die Ausnahme enthält. Diese Struktur hat das folgende Format:</p>
  <p class="code">{<br> message : &quot;&quot;, // eine Zeichenkette, die eine kurze Nachricht für diese Ausnahme darstellt<br> longMessage : &quot;&quot;, // eine Zeichenkette, die eine längere Nachricht für diese Ausnahme darstellt<br> script : &quot;&quot;, // eine Zeichenkette
    der beschreibt, woher die Exception kam<br> line: 0, // ein Real, der die Zeilennummer angibt, aus der die Exception kam<br> stacktrace : [ &quot;&quot;, &quot;&quot; ], // ein Array von Strings, das den Stackframe angibt, aus dem die Exception
    erzeugt wurde<br> }
  </p>
  <p>Sie können auch <span class="inline">undefined</span> als Argument angeben, was den angepassten Exception-Handler (falls gesetzt) entfernt und zur Standard-Fehlermeldung von <span class="notranslate">GameMaker Studio 2</span> zurückkehrt.</p>
  <p>Diese Funktion gibt die zuvor eingestellte Exception-Handler-Methode zurück. Wurde diese jedoch nie geändert oder wurde sie zuvor mit <span class="inline">undefined</span> zurückgesetzt, dann gibt sie einfach <span class="inline">undefined</span> zurück.</p>
  <p>Die Übergabe einer Methode an diese Funktion bedeutet, dass dem Benutzer keine Fehlermeldung angezeigt wird und Sie die Ausnahme selbst behandeln dürfen. Sie können diese Funktion jedoch nicht verwenden, um aus der Exception &quot;auszubrechen&quot; und Ihr Spiel fortzusetzen, da das Spiel
    immer noch geschlossen wird, nachdem der Exception-Handler aufgerufen wurde.</p>
  <p>Beachten Sie, dass der Kontext für die Ausführung der Methode <i>nicht</i> in einem Ereignis liegt und es daher höchst unwahrscheinlich ist, dass zu diesem Zeitpunkt etwas auf dem Bildschirm gerendert werden könnte. Im Allgemeinen ist es am sichersten, an diesem Punkt eine Datei mit den
    Ausnahmekontextinformationen zu speichern, so dass sie - zum Beispiel - beim nächsten Durchlauf des Spiels geparst und verarbeitet und dann behandelt werden können.</p>
  <p>Beachten Sie, dass, wenn Sie die <tt>Return-Anweisung</tt> in der bereitgestellten Methode verwenden, der angegebene Wert in eine Ganzzahl umgewandelt und als Exit-Code des Läufers verwendet wird.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">exception_unhandled_handler(user_handler);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td>benutzer_handler</td>
        <td>Die Methode (benutzerdefinierte Funktion), die als Exception-Handler verwendet werden soll, oder <span class="inline">undefined</span>, um sie auf den Standardwert zurückzusetzen.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code">Methode (oder undefiniert)</p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">exception_unhandled_handler(function(ex))<br> {
    <br> show_debug_message( &quot;--------------------------------------------------------------&quot;);<br> show_debug_message( &quot;Unhandled exception &quot; + string(ex) );<br> show_debug_message( &quot;--------------------------------------------------------------&quot;);<br> if file_exists(&quot;crash.txt&quot;) file_delete(&quot;crash.txt&quot;);<br> var _f = file_text_open_write(&quot;crash.txt&quot;);<br> file_text_write_string(_f, string(ex));<br> file_text_close(_f);
    <br> return 0;<br> }
    <br> )
  </p>
  <p>Der obige Code erstellt eine Exception-Handler-Methode und verwendet diese, um eine Datei mit den Ausnahmedaten zu speichern.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Debugging.htm">Fehlersuche</a></div>
        <div style="float:right">Weiter: <a href="get_integer.htm">get_integer</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
exception_unhandled_handler
-->
  <!-- TAGS
exception_unhandled_handler
-->
</body>
</html>