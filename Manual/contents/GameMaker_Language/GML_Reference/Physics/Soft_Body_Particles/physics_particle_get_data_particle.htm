<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_particle_get_data_particle</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_particle_get_data_particle" />
  <meta name="rh-index-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
  <meta name="search-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_particle_get_data_particle</h1>
  <p>Diese Funktion gibt verschiedene Informationen über einen einzelnen Partikel in der Physiksimulation zurück, wobei die angegebenen Flags überprüft werden. Der Partikelindex (seine ID) ist derjenige, der von der Funktion <a href="physics_particle_create.htm"><tt>physik_teilchen_erzeugen()</tt></a>,
    zurückgegeben wurde, und der verwendete Puffer muss zuvor mit der Funktion <a href="../../Buffers/buffer_create.htm"><tt>buffer_create()</tt></a>. Er sollte vom Typ &quot;grow&quot; sein, wobei die Größe ungefähr der erwarteten Rückgabe entspricht
    Daten. Die Flags selbst werden mit den unten angegebenen Konstanten gesetzt, und Sie würden den bitweisen <i>oder</i> &quot;|&quot; verwenden, um einen einzelnen Flag-Wert zu erstellen, um die gewünschten Informationen zu erhalten.</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Konstant</th>
        <th>Beschreibung</th>
        <th>Daten Typ</th>
      </tr>
      <tr>
        <td>phy_particle_data_flag_typeflags</td>
        <td>Der Flaggenwert für den Partikel.</td>
        <td>Puffer_u32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_position</td>
        <td>Die x- und y-Position des Partikels.</td>
        <td>2 x Puffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_velocity</td>
        <td>Die horizontale und vertikale Geschwindigkeit.</td>
        <td>2 x Puffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_colour</td>
        <td>Die Farbe und der Alphawert (hexadezimal).</td>
        <td>Puffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_category</td>
        <td>Die Partikelkategorie (wie beim Erstellen des Partikels definiert).</td>
        <td>Puffer_u32</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">physics_particle_get_data_particle(ind, buffer, flags)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td>ind</td>
        <td>Der Index (ID) des Partikels, von dem die Daten abgerufen werden sollen.</td>
      </tr>
      <tr>
        <td>Puffer</td>
        <td>Der (zuvor erstellte) Puffer, der zum Speichern der Daten verwendet werden soll.</td>
      </tr>
      <tr>
        <td>Flaggen</td>
        <td>Die Flags, die verwendet werden, um Daten über bestimmte Partikeltypen zu extrahieren.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code">Daten puffern</p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">var part = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1)<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_velocity;<br> var buffer = buffer_create(16, buffer_grow, 4);<br> physics_particle_get_data_particle(part,
    buffer, flags);<br> px = buffer_read(buffer, buffer_f32);<br> py = buffer_read(buffer, buffer_f32);<br> pvelx = buffer_read(buffer, buffer_f32);<br> pvely = buffer_read(buffer, buffer_f32);<br> buffer_delete(buffer);
  </p>
  <p>Der obige Code holt sich die Position und Geschwindigkeit des durch die Variable &quot;part&quot; indizierten Partikels und speichert die Daten in einer Reihe von Variablen.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Soft_Body_Particles.htm">Weichkörperpartikel</a></div>
        <div style="float:right">Weiter: <a href="physics_particle_group_get_data.htm">physics_particle_group_get_data</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
physics_particle_get_data_particle
phy_particle_data_flag_typeflags
phy_particle_data_flag_position
phy_particle_data_flag_velocity
phy_particle_data_flag_colour
phy_particle_data_flag_category
-->
  <!-- TAGS
physics_particle_get_data_particle
-->
</body>
</html>