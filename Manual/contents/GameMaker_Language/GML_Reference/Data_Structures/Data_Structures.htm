<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Daten-Strukturen</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Data Structures" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Data Structures" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Daten-Strukturen</h1>
  <p>In Spielen müssen Sie oft Informationen in einer präzisen und geordneten Weise speichern. Sie müssen z. B. Listen von Gegenständen speichern, die eine Person bei sich trägt, oder Sie möchten ein Raster von Orten speichern, die noch besucht werden müssen. Nun, Sie <i>können</i> die Arrays
    verwenden, aber wenn Sie kompliziertere Operationen durchführen wollen, wie z. B. das Sortieren der Daten oder die Suche nach einem bestimmten Element, müssen Sie große Teile des <span class="notranslate">GML-Codes</span> schreiben, der langsam in der Ausführung und schwierig in der Fehlersuche sein kann und sehr mühsam zu schreiben ist!</p>
  <p>Um hier Abhilfe zu schaffen, verfügt <span class="notranslate">GameMaker Studio 2</span> über eine Reihe von eingebauten <b>Datenstrukturen</b>, auf die über spezielle Funktionen zugegriffen werden kann. Es stehen sechs verschiedene Arten von Datenstrukturen zur Verfügung, von denen jede ihre eigenen Vorteile hat, je nachdem, welche Art von
    Jede hat ihre eigenen Vorteile, je nachdem, welche Art von Informationen Sie speichern und wie Sie sie später manipulieren möchten: Stapel, Warteschlangen, Listen, Karten, Prioritätswarteschlangen und Gitter.</p>
  <p>Im Wesentlichen funktionieren alle Datenstrukturen auf die gleiche Weise - Sie erstellen eine Datenstruktur und speichern ihren <i>Indexwert</i> in einer Variablen. Mit diesem Index referenzieren Sie dann die Datenstruktur in allen weiteren Funktionsaufrufen, die Operationen auf ihr durchführen können.
    durchführen können. Wenn Sie fertig sind, zerstören Sie die Datenstruktur wieder, um sie aus dem Speicher zu entfernen. Sie können so viele der Strukturen gleichzeitig verwenden, wie Sie benötigen, und alle Strukturen können jeden der verfügbaren <a href="../../GML_Overview/Data_Types.htm">Datentypen</a> speichern.</p>
  <p class="note"><b>HINWEIS: </b>Wie alle dynamischen Ressourcen belegen auch Datenstrukturen Speicherplatz und sollten daher <b>immer</b> zerstört werden, wenn sie nicht mehr benötigt werden, um Speicherlecks zu vermeiden, die Ihr Spiel verlangsamen und schließlich zum Absturz bringen.</p>
  <p class="note"><b>WICHTIG!</b> Wenn Sie eine Datenstruktur anlegen, ist der Indexwert zu ihrer Identifizierung ein ganzzahliger Wert, der bei 0 beginnt. Das bedeutet, dass verschiedene Datenstrukturen <b>denselben</b> Indexwert haben können, daher sollten Sie im Zweifelsfall mit der <span style="font-size:1px;"><tt style="font-size: 14px">ds_existiert</tt></span>    Funktion verwenden, bevor Sie auf sie zugreifen. Beachten Sie auch, dass Indizes wiederverwendet werden, d. h. ein zerstörter Indexwert einer Datenstruktur kann anschließend von einer neu erstellten verwendet werden, und wir empfehlen, dass Sie jede Variable, die einen DS-Index enthält, auf -1 setzen, nachdem Sie die
    der Datenstruktur.</p>
  <p>Informationen zu den verschiedenen Datenstrukturen finden Sie in den folgenden Abschnitten:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="DS_Grids/DS_Grids.htm">Gitter</a></li>
    <li><a href="DS_Lists/DS_Lists.htm">Listen</a></li>
    <li><a href="DS_Maps/DS_Maps.htm">Karten</a></li>
    <li><a href="DS_Priority_Queues/DS_Priority_Queues.htm">Prioritäts-Warteschlangen</a></li>
    <li><a href="DS_Queues/DS_Queues.htm">Warteschlangen</a></li>
    <li><a href="DS_Stacks/DS_Stacks.htm">Stapel</a></li>
  </ul>
  <p> </p>
  <p>Bevor Sie Datenstrukturen in Ihrem Spiel verwenden, sollten Sie sich auch darüber im Klaren sein, dass es bestimmte Momente gibt, in denen Sie aufgrund von Rundungsfehlern ein Ergebnis erhalten, das nicht den Erwartungen entspricht. Dies kann behoben werden, indem Sie die DS-Präzision wie folgt ändern
    Funktion:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="ds_set_precision.htm">ds_set_präzision</a></li>
  </ul>
  <p> </p>
  <p>Es gibt auch eine spezielle Funktion, um zu prüfen, ob eine Datenstruktur eines bestimmten Typs existiert:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="ds_exists.htm">ds_existiert</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../GML_Reference.htm"><span class="notranslate">GML-Referenz</span></a></div>
        <div style="float:right">Nächste: <a href="../Strings/Strings.htm">Streicher</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Data Structures
-->
  <!-- TAGS
data_structure_functions
-->
</body>
</html>