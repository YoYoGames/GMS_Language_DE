<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>tun / bis</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until functions" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>tun / bis</h1>
  <p>Eine <tt>do-Funktion</tt> ist eine weitere Möglichkeit, eine oder mehrere<span class="glossextra">Anweisungen</span> mehrfach zu iterieren, und ist eigentlich eine &quot;do...<tt>until&quot;-Anweisung</tt>, da
    Sie können das eine nicht ohne das andere haben, da Sie <span class="notranslate">GameMaker Studio 2</span> sagen, dass es etwas tun soll, bis ein bestimmter <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a> <tt>wahr</tt> zurückkommt. Sie hat diese Form:</p>
  <p class="code">do<br> {
    <br> &lt;Anweisung&gt;;
    <br> &lt;Statement&gt;;
    <br> ...
    <br> }
    <br> until (&lt;Ausdruck&gt;);</p>
  <p>Die Anweisung (die ein Codeblock aus mehreren Anweisungen innerhalb geschweifter Klammern <tt>{}</tt> sein kann) wird so lange ausgeführt, bis der Ausdruck als <tt>wahr</tt> erkannt wird, wobei die erste Anweisung <strong>immer mindestens einmal ausgeführt</strong> wird. Unten finden Sie
    finden Sie ein Beispiel für eine typische Verwendung von <tt>do... until</tt>:</p>
  <p class="code">do<br> {
    <br> x = random(Raum_Breite);<br> y = random(Raum_Höhe);<br> }
    <br> until (place_free(x, y));</p>
  <p>Der obige Code versucht, das aktuelle Objekt an einer freien Position zu platzieren und setzt die x/y-Variablen mindestens einmal, und führt dann so viele <a class="glossterm" data-glossterm="Iteration" href="#">Iterationen</a>wie nötig durch
    bis der Ausdruck <tt>place_free()</tt> <tt>true</tt> zurückgibt.</p>
  <p><strong>Wann sollten Sie eine <span class="inline">do</span> / <span class="inline">until</span> Schleife verwenden?</strong> Sie sollte immer dann verwendet werden, wenn Sie eine oder mehrere Anweisungen wiederholen wollen, aber nicht genau wissen, wie oft sie wiederholt werden müssen, und sicherstellen wollen, dass
    sicherstellen wollen, dass die Anweisungen <em>mindestens einmal</em> ausgeführt werden, bevor die Schleife endet.</p>
  <p>Sie können auch die <a href="break.htm"><span class="inline">break</span></a> und <a href="continue.htm"><span class="inline">continue</span></a> Anweisungen innerhalb Ihrer <span class="inline">do</span> -Schleifen verwenden. Die Verwendung von <span class="inline">break</span> führt dazu, dass
    die Schleife sofort verlassen und mit einem beliebigen Code fortfahren, der sich in dem Ereignis oder der Funktion befindet, nachdem die Schleife beendet sein sollte, z. B:</p>
  <p class="code">var _id = noone;<br> do
    <br> {<br> _id = list[| 0];<br> if instance_exists(_id)<br> {<br> _break;<br> } <br> ds_list_delete(list, 0);<br> } <br> until (ds_list_empty(list));<br> target = _id;</p>
  <p>Im obigen Code erstellen wir eine lokale Variable und setzen sie auf das Schlüsselwort <a href="../Instance_Keywords.htm">noone</a>. Dann führen wir eine <span class="inline">do / until</span> -Schleife aus, in der wir die erste Position einer DS-Liste daraufhin überprüfen, ob sie eine gültige
    Instanz-ID enthält, und wenn dies der Fall ist, wird die Schleife <span class="inline">break</span> ausgeführt, andernfalls wird der Wert für die Listenposition gelöscht. Nachdem die Schleife beendet wurde (entweder durch die <span class="inline">break</span> oder weil die Liste leer ist), wird der Wert der lokalen
    Variablenwert dann der Instanzvariablen <span class="inline">target</span> zugewiesen.</p>
  <p>Ein Beispiel für die Verwendung von continue in einer <span class="inline">do / until</span> -Schleife wäre:</p>
  <p class="code">do<br> {
    <br> var _x = random(Raum_Breite);<br> var _y = random(Raum_Höhe);<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> weiter;
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br> }
    <br> until (instance_count(obj_Enemy) &gt;= 10);</p>
  <p>Dieser Code erzeugt eine zufällige Raumposition und prüft dann, ob eine Instanz des Objekts <span class="inline">obj_Enemy</span> an dieser Position existiert. Wenn ja, wird die aktuelle Schleifeniteration mit <span class="inline">continue</span> beendet und
    Wenn nicht, wird eine Instanz des Objekts <span class="inline">obj_Enemy</span> an der zufälligen Position erzeugt. Die Schleife wird erst beendet, wenn sich 10 oder mehr Instanzen des Objekts im Raum befinden.</p>
  <p>Ein letzter Hinweis: Seien Sie vorsichtig mit Ihren <tt>do-Schleifen</tt>, da Sie diese leicht zu einer Endlosschleife machen können. In diesem Fall bleibt Ihr Spiel hängen und reagiert nicht mehr auf Benutzereingaben und muss zwangsweise geschlossen werden.</p>
  <p>Weitere Beispiele für Schleifenschlüsselwörter finden Sie in den Abschnitten über <a href="repeat.htm"><tt>wiederholen</tt></a>, <a href="while.htm"><tt>while</tt></a>, und <a href="for.htm"><tt>für</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Language_Features.htm">Spracheigenschaften</a></div>
        <div style="float:right">Weiter: <a href="for.htm">für</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->

</body></html>