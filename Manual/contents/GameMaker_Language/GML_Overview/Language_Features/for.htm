<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>für</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the for function" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>für</h1>
  <p>Eine der gebräuchlichsten Möglichkeiten, eine <a class="glossterm" data-glossterm="Anweisung" href="#">Anweisung</a> (oder Anweisungen) mehrfach zu iterieren, ist die Verwendung einer <tt>for-Schleife</tt>, die diese Form hat:</p>
  <p class="code">for (&lt;Zuweisung&gt;; &lt;Ausdruck&gt;; &lt;Operation&gt;;)<br> {<br> &lt;Anweisung&gt;;<br> &lt;Anweisung&gt;;<br>...<br> }</p>
  <p>Das funktioniert folgendermaßen - Zuerst wird die Zuweisung ausgeführt, die einer Variablen einen Wert zuweist, dann wird der <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a> ausgewertet und, wenn er <tt>wahr</tt> ist, die Anweisungen in den geschweiften Klammern{}
    ausgeführt werden. Als nächstes wird die Operation auf die zugewiesene Variable ausgeführt und dann wird der Ausdruck erneut ausgewertet. Diese Schleife wird so lange fortgesetzt, bis der Ausdruck als <tt>falsch</tt> erkannt wird.</p>
  <p>Nun, das mag kompliziert klingen, wenn es so geschrieben ist, aber Sie sollten es so interpretieren:</p>
  <ol>
    <li>Die erste Zuweisung initialisiert die for-Schleife</li>
    <li>Der Ausdruck testet, ob die Schleife beendet werden soll</li>
    <li>Die Anweisung wird ausgeführt</li>
    <li>Die Operation wird durchgeführt</li>
    <li>Gehen Sie zurück zu Schritt 2 und führen Sie den Ausdruck erneut aus und fahren Sie fort oder verlassen Sie die Schleife</li>
  </ol>
  <p>Dies ist äußerst nützlich, um sich wiederholende Aufgaben zu erledigen, die auf andere Weise mehrere Codezeilen erfordern würden, und wird häufig als Zähler für die Auswertung von Arrays, das Zeichnen von Dingen, das Setzen inkrementeller Werte usw. verwendet. Das folgende Codebeispiel veranschaulicht
    eine typische Verwendung für diese Art von Anweisung:</p>
  <p class="code">for (var i = 0; i &lt; 10; i += 1)<br> {
    <br> draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i]));<br> }
  </p>
  <p>Der obige Code initialisiert eine <span class="inline">for</span> -Schleife, die bei 0 beginnt und bis (und einschließlich) 9 zählt, und verwendet dann den Schleifenwert von <tt>i</tt>, um die in einem Array gespeicherten Werte auf den Bildschirm zu zeichnen. Beachten Sie, wie die <tt>for-Schleifenvariable</tt> 
   <tt>i</tt> nicht nur verwendet wird, um eine Schleife durch das Array zu ziehen, sondern auch, um eine Zahl zu zeichnen und <span class="notranslate">GameMaker Studio 2</span> mitzuteilen, wohin die Werte im Raum gezeichnet werden sollen. Diese Flexibilität ist einer der Hauptgründe, warum <tt>for-Schleifen</tt> in der Programmierung so wichtig sind.</p>
  <p><strong>Wann sollten Sie eine <tt>for-Schleife</tt></strong> verwenden? Immer dann, wenn Sie eine feste Anzahl von Iterationen über eine oder mehrere Anweisungen ausführen müssen, während Sie die <a class="glossterm" data-glossterm="Iteration" href="#">Iteration</a> verfolgen, die
    die gerade ausgeführt wird und diesen Iterationswert verwendet.</p>
  <p class="note"><b>HINWEIS</b>: Sie werden bei der Arbeit mit anderen Personen mehrere Beispiele sehen, in denen die Variablen &quot; i&quot;<tt>und</tt>&quot; j&quot; für die Schleifenzählervariable verwendet werden. Dies sind <b>keine</b> obligatorischen Variablennamen und Sie können alles verwenden
    wie &quot; a&quot; oder &quot; foo&quot; oder<tt>was auch immer.</tt> Die Verwendung von &quot; i&quot;<tt>und</tt>&quot; j&quot; ist einfach eine Standardkonvention in der Programmierung.</p>
  <p>Es ist erwähnenswert, dass Sie die speziellen Anweisungen <span class="inline"><a href="break.htm">break</a></span> und <span class="inline"><a href="continue.htm">continue</a></span> auch innerhalb einer <span class="inline">for</span> -Schleife verwenden können. Wenn Sie <span class="inline">break</span> verwenden, wird die Schleife sofort verlassen und mit dem Code fortgefahren, der sich in dem Ereignis oder der Funktion befindet, nachdem die Schleife beendet sein sollte, z. B:</p>
  <p class="code">var _inst = noone;<br> for (var i = 0; i &lt; 10; i += 1)<br> {
    <br> _inst = instance_find(obj_Enemy_Parent, i);<br> if instance_exists(_inst)<br> {<br> if _inst.object_index == obj_Enemy_Melee<br> {<br> break;<br> } <br> } <br> } <br> target = _inst;</p>
  <p>Der obige Code durchläuft in einer Schleife die 10 nächstgelegenen Instanzen des angegebenen &quot;übergeordneten&quot; Objekts, und wenn eine Instanz gefunden wird, prüft er die ID des Instanzobjekts, und wenn es eine Instanz von <span class="inline">obj_Enemy_Melee</span> ist, wird die Schleife beendet
    unter Verwendung von <span class="inline">break</span> beendet und der ID-Wert einer Variablen zugewiesen (wenn keine Instanz gefunden wird, dann wird das Schlüsselwort <span class="inline"><a href="../Instance_Keywords.htm">noone</a></span> der Variablen hinzugefügt).</p>
  <p>Ein Beispiel für die Verwendung von <span class="inline">continue</span> in einer <span class="inline">for</span> -Schleife wäre:</p>
  <p class="code">var _val = 0;<br> for (var i = 0; i &lt; 10; i += 1)<br> {
    <br> if (val_array[i] &lt;= 0)<br> {<br> continue;<br> } <br> _val += val_array[i];<br> }
    <br> draw_text(32, 32, &quot;Positive Werte gesamt = &quot; + string(_val));</p>
  <p>Dieser Code prüft den Wert, der in jeder Array-Position eines <a href="../Arrays.htm">1D-Arrays</a> der Länge 10 gespeichert ist, und wenn einer davon kleiner oder gleich 0 ist, wird die Schleife <span class="inline">continue</span> beendet, was bedeutet, dass die aktuelle Iteration beendet wird,
    <span class="inline">i</span> wird inkrementiert, und die nächste Schleifeniteration wird gestartet. Wenn der Wert größer als 0 ist, wird er zur lokalen Variablen <span class="inline">_val</span> addiert, und nach Beendigung der Schleife wird der Gesamtwert
    auf den Bildschirm gezeichnet.</p>
  <p>Weitere Beispiele für Schleifenschlüsselwörter finden Sie in den Abschnitten über <a href="repeat.htm"><tt>wiederholen</tt></a>, <a href="while.htm"><tt>while</tt></a>, und <a href="do___until.htm"><tt>do / bis</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Language_Features.htm">Spracheigenschaften</a></div>
        <div style="float:right">Nächster: <a href="switch.htm">Schalter</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->

</body></html>