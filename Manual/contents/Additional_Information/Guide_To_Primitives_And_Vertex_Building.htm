<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Anleitung zu Primitiven und Vertexaufbau</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Anleitung zu Primitiven und Vertexaufbau</h1>
  <p>In diesem Handbuch wird kurz beschrieben, wie Sie <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitive</a> mit benutzerdefinierten <strong>Scheitelpunktformaten</strong> und <strong>Scheitelpunktpuffern</strong> erstellen und verwenden können. </p>
  <p>Wenn Sie mit 3D, Spezialeffekten, komplexen Zeichenvorgängen oder <span class="notranslate">Shadern</span> arbeiten, brauchen Sie sich im Allgemeinen nicht allzu viele Gedanken über das verwendete Vertex-Format zu machen, da GameMaker <span class="notranslate">Studio 2</span> die Vertex-Daten automatisch für Sie einrichtet und durchreicht. Manchmal ist es jedoch notwendig, eigene Vertexdaten zu erstellen und diese entsprechend zu formatieren, vor allem, wenn Sie die Geschwindigkeit erhöhen oder zusätzliche Informationen übergeben möchten. Zum Beispiel enthält das Standard
    Vertex-Format eine x, y, z 3D-Position, Farbe (mit Alpha) und UV-Texturkoordinaten, was, wenn Sie es selbst erstellen würden, etwa so aussehen würde:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> mein_format = vertex_format_end();</p>
  <p>Wenn Sie jedoch (z. B.) nur einen <span class="notranslate">Shader</span> verwenden, um die Position des Scheitelpunkts zu manipulieren, dann wäre es nicht nötig, Farb- oder Texturdaten durchzugeben. In diesem Fall würden Sie Ihr eigenes Format wie folgt erstellen:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> mein_format = vertex_format_end();</p>
  <p>Insgesamt gibt es fünf verschiedene Scheitelpunktattribute, die Sie bei der Definition eines Scheitelpunktformats verwenden können:</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D-Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Im Allgemeinen müssen Sie <em>immer</em> Position oder 3D-Position als Teil des Formats angeben, aber alle anderen Angaben sind optional.</p>
  <p>Sie sollten beachten, dass, sobald Sie Ihr Scheitelpunktformat erstellt haben, die Reihenfolge, in der Sie die Scheitelpunktattribute definiert haben, beim Aufbau Ihrer <strong>Primitive</strong> <i>beachtet werden muss</i>. Wenn Sie also ein Scheitelpunktformat als Position, Farbe,
    und Texturkoordinate definiert haben, <b> <i>müssen</i></b> Sie diese Attribute in der gleichen Reihenfolge zum Primitiv hinzufügen, da Sie sonst einen Fehler erhalten. Beachten Sie auch, dass ein Scheitelpunktformat wie jede andere dynamische Ressource Speicher benötigt und daher entfernt werden sollte
    wenn es nicht benötigt wird, mit der Funktion <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><tt>vertex_format_delete()</tt></a>.</p>
  <p>Alle Primitive, die Sie aufbauen, werden in einem <b>Scheitelpunktpuffer</b> gehalten. Dieser muss vorher erstellt werden und wird dann von den Funktionen referenziert, die zum Erstellen Ihres Primitivs verwendet werden. Der Scheitelpunktpuffer kann so oft wie nötig wiederverwendet werden, um verschiedene
    Der Vertex-Puffer kann so oft wie nötig wiederverwendet werden, um verschiedene Primitive zu erstellen, oder er kann &quot;eingefroren&quot; werden, um einen bestimmten Primitivtyp für die Dauer Ihres Spiels oder Levels beizubehalten (dies ist die schnellste Methode, wenn Sie also wissen, dass sich ein Primitiv, das Sie erstellen, nicht ändern wird, sollten Sie immer diese Option verwenden).</p>
  <p>Ein Beispiel für den Aufbau eines einzelnen Dreiecksprimitivs wird im folgenden Code gezeigt:</p>
  <p class="code">// CREATE EVENT<br> v_buff = vertex_create_buffer();<br> vertex_begin(v_buff, global.my_format);<br> vertex_position(v_buff, 10, 10);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 0, 0);<br> vertex_position(v_buff, 110, 10);<br> vertex_colour(v_buff, c_white, 1); <br> vertex_texcoord(v_buff, 1, 0);<br> vertex_position(v_buff, 110, 110);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 1, 1);<br> vertex_end(v_buff);
    <br>
    <br> // DRAW EVENT<br> var tex = sprite_get_texture(spr_Background, 0);<br> <span class="notranslate">shader_set</span>(shd_shimmer);
    <br> vertex_submit(v_buff, pr_trianglelist, tex);<br> <span class="notranslate">shader_reset</span>();
  </p>
  <p>Hier müssen wir zuerst unseren Scheitelpunktpuffer im Ereignis "Create" der Instanz erstellen, dann beginnen wir mit der Definition der verschiedenen Scheitelpunkte, aus denen unser Dreiecksprimitiv besteht, und geben die Position, die Farbe und die Textur-UV-Koordinate für jeden der
    drei Punkte, die wir verwenden möchten. Wir beenden dann die Scheitelpunktdefinition und wissen, dass der Scheitelpunktpuffer mit diesen Scheitelpunktdaten in der Variablen &quot;v_buff&quot; gespeichert ist.  </p>
  <p class="note"><strong>HINWEIS</strong>: Wenn der Inhalt des Puffers ständig aktualisiert werden soll, würde der Puffer erstellt, mit den Vertex-Daten versehen und dann wieder zerstört werden - nachdem er gezeichnet wurde - alles im selben Schritt.</p>
  <p>Wir zeichnen dann den Inhalt des Vertex-Buffers im Draw-Event mit einem <span class="notranslate">Shader</span>. Dies ist ein sehr einfaches Beispiel und entspricht im Wesentlichen der internen Arbeitsweise von <span class="notranslate">GameMaker Studio 2</span>, d. h.: Wenn Sie ein Sprite zeichnen, erzeugt <span class="notranslate">GameMaker</span> einen Vertex-Buffer mit vier Eckpunkten
    und erzeugt zwei Dreiecke (die ein Quadrat ergeben, auch &quot;Quad&quot; genannt), und texturiert diese beiden Dreiecke mit dem Sprite-Bild. Wenn wir dieses Sprite zeichnen, übergeben wir den Vertex-Puffer und sein Inhalt wird auf den Bildschirm gezeichnet.</p>
  <p>Sie werden feststellen, dass wir beim Übermitteln des Scheitelpunktpuffers zum Zeichnen einen Primitivtyp angeben. Der Typ des Primitivs, den Sie verwenden, kann ein Punkt, eine Linienliste oder -leiste oder eine Dreiecksliste oder -leiste sein, aber Dreiecksfächer sind <i>nicht</i> erlaubt, da die meisten mobilen
    Hardware diesen primitiven Typ nicht akzeptiert. Vergessen Sie nicht, Ihren Scheitelpunktpuffer korrekt für den Typ des Primitivs zu formatieren, das zum Zeichnen verwendet werden soll. Zum Beispiel erfordert das Zeichnen eines Primitivs mit zwei Dreiecken als Dreiecksliste 6 Punkte,
    aber als Dreiecksstreifen sind nur 4 Punkte erforderlich. Welchen Typ Sie verwenden, bleibt Ihnen überlassen und hängt davon ab, was Sie zeichnen möchten und welchen Effekt Sie erreichen wollen.</p>
  <p>Ein letzter wichtiger Punkt, den Sie beachten sollten, wenn Sie Ihre eigenen Scheitelpunktpuffer auf diese Weise verwenden, ist die Auswirkung auf die Scheitelpunktbatches, die an die GPU gesendet werden. Wenn Sie einen Scheitelpunkt-Puffer erstellen, erzeugen Sie die unterste Ebene der Grafikdaten.
    Wenn Sie also zeichnen, sendet <span class="notranslate">GameMaker Studio 2</span> Ihren Puffer direkt an die Grafikkarte. Aus diesem Grund müssen Sie, wenn Sie eine bessere Stapelverarbeitung wünschen, selbst dafür sorgen und die Dinge, die Sie stapeln möchten, im selben Puffer speichern.</p>
  <p>Wie wir bereits oben erwähnt haben, werden Scheitelpunktformate aus den folgenden 5 Attributtypen zusammengesetzt (die über die entsprechende Funktion <tt>vertex_format_add_*</tt> hinzugefügt werden):</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D-Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Innerhalb des GLSL <span class="notranslate">ES-Shaders</span> werden diese Arten anhand der folgenden 4 Attribute erkannt:</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Nun mag dies seltsam aussehen, da es scheint, dass wir in unserem Vertex-Format mehr Attributarten angeben können als im <span class="notranslate">Vertex-Shader</span>. Im <span class="notranslate">Shader</span> werden jedoch <i>Position</i> und <i>3D-Position</i> als <em>dasselbe </em>Attribut behandelt, mit der Ausnahme, dass
   <i>Position</i> nur &quot;x&quot;- und &quot;y&quot;-Koordinaten haben soll, während 3D-Position &quot;x <i>&quot;-, &quot;y&quot;-</i> und &quot;z&quot;-Koordinaten hat. Wie ordnen Sie also die Angaben in Ihrem Vertex-Format der Definition von Attributen in Ihrem Shader zu <span class="notranslate">?</span> Lassen Sie uns
    schauen wir uns zunächst einen typischen Satz von Attributen aus dem <span class="notranslate">Standard-Shader</span> an:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> //attribute vec3 in_Normal; // (x,y,z) in diesem <span class="notranslate">Shader</span> nicht verwendet.<br> attribute vec4 in_Colour; // (r,g,b,a)<br> attribute vec2 in_TextureCoord; // (u,v)</p>
  <p>Und hier ist ein Stück Code, das ein Vertex-Format einrichtet, das mit diesem Shader kompatibel ist <span class="notranslate">:</span></p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> mein_format = vertex_format_end();</p>
  <p>Wie wird nun das <span class="notranslate">Shader-Attribut</span> dem Vertex-Format-Typ zugeordnet? Es basiert einfach auf der Namenskonvention:</p>
  <ul class="colour">
    <li>&quot;in_Position&quot; mappt auf vertex_format_add_position <tt>/ _3d()</tt></li>
    <li><tt>&quot;in_Colour&quot; mappt auf vertex_format_add_colour <tt>()</tt></tt>
    </li>
    <li><tt><tt>&quot;in_TextureCoord&quot; bildet auf vertex_format_add_textcoord <tt>()</tt>ab</tt>
      </tt>
    </li>
  </ul>
  <p><tt><tt><tt></tt></tt>
    </tt>Nun wird es kniffliger, wenn Sie mehrere Attribute der gleichen Art haben, aber die Dinge basieren immer noch auf der gleichen Namenskonvention. Wir werden uns <b>jetzt</b> mit der Bereitstellung zusätzlicher <b>Farb- und</b> <b>Texturkoordinaten</b> befassen, da es nur ein Positions- und ein Normal-Attribut im <span class="notranslate">Shader- oder</span> Vertex-Format geben kann, aber mehrere Farb- oder <em>Textur-Attribute</em>.</p>
  <p>Wenn Sie Ihrem <span class="notranslate">Shader</span> zusätzliche Farbattribute hinzufügen, muss am Ende des <span class="notranslate">Shader-Attributs</span> eine Zahl hinzugefügt werden, die angibt, auf welchen bestimmten Eintrag im Vertex-Format das Attribut abgebildet wird. Hier ist ein Beispiel - zuerst das Vertex-Format:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> mein_format = vertex_format_end();</p>
  <p>Und nun die zugehörigen <span class="notranslate">Shader-Attribute</span>:</p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> attribute vec4 in_Colour0; // (r,g,b,a)<br> attribute vec4 in_Colour1; // (r,g,b,a)<br> attribute vec2 in_TextureCoord; // (u,v)</p>
  <p>In diesem Fall entspricht <tt>in_Colour0</tt> der ersten <tt>vertex_format_add_colour()</tt> und <tt>in_Colour1</tt> der zweiten.</p>
  <p>Texturkoordinaten werden etwas anders behandelt als Farbe. Grundsätzlich wird alles, was nicht in_Position <tt>, in_Normal</tt> <tt>oder</tt> eines der in_Colour <tt>[0 ... ]</tt> Attribute genannt wird, als Texturkoordinate behandelt. Die Reihenfolge, in der sie
    Die Reihenfolge, in der sie in der Liste der Attribute im <span class="notranslate">Shader</span> definiert sind, gibt an, auf welches Attribut im Vertexformat sie abgebildet werden. Siehe das folgende <span class="notranslate">GML-Beispiel</span>:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> vertex_format_add_textcoord();
    <br> vertex_format_add_textcoord();
    <br> mein_format = vertex_format_end();</p>
  <p>Und der <span class="notranslate">Shader-Code</span> würde etwa so aussehen:</p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> attribute vec4 in_Colour; // (r,g,b,a)<br> attribute vec2 in_myTexcoord; // (u,v)<br> attribute vec2 in_TextureCoord; // (u,v)<br> attribute vec2 in_Something; // (u,v)</p>
  <p>In diesem Beispiel mappen <tt>in_myTexcoord</tt>, <tt>in_TextureCoord</tt> und <tt>in_Something</tt> auf die drei aufeinanderfolgenden Texturkoordinatenattribute, die im Vertexformat definiert sind.</p>
  <p>Eine vollständige Liste aller Funktionen, die zum Erstellen von Scheitelpunktformaten, Scheitelpunktpuffern und Primitiven erforderlich sind, finden Sie auf der folgenden Seite:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitive und Vertex-Formate</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Guide_To_Using_Blendmodes.htm">Anleitung zur Verwendung von Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->

</body></html>