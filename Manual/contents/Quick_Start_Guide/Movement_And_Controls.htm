<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Bewegung und Bedienelemente</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and DnD to show people how to move things around within a game." />
  <meta name="rh-index-keywords" content="Quick Start - Movement And Controls" />
  <meta name="search-keywords" content="movement,controls" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Bewegung und Bedienelemente</h1>
  <p>Im <a href="Drawing.htm">vorigen Abschnitt</a> dieser Kurzanleitung wurden einige Beispiele für das Zeichnen von Objekten auf dem Bildschirm gegeben, aber das bloße Zeichnen von Objekten nützt nicht viel, wenn Sie sie nicht auch bewegen können ... daher werden wir in diesem Abschnitt
    In diesem Abschnitt finden Sie daher einige Beispiele für die Bewegung Ihrer Objekte sowie einige grundlegende Steuerungsschemata für verschiedene Arten von Spielen. Alle Beispiele werden sowohl mit <span class="notranslate">Drag and Drop™</span><span class="notranslate">(DnD™</span>) als auch mit der <span class="notranslate">GameMaker Language</span><span class="notranslate">(GML</span>) gegeben, so dass Sie das verwenden können, womit Sie sich wohler fühlen.
    mit der Sie sich wohler fühlen. Bitte beachten Sie, dass wir hier nicht zu sehr in die Tiefe gehen werden, da wir möchten, dass Sie so schnell wie möglich mit dem Erstellen von Spielen beginnen können, daher möchten wir Sie ermutigen, alle Links zu erkunden und die Suchfunktion
    des Handbuchs zu nutzen, um nach zusätzlichen Informationen zu suchen, wenn Sie sich nicht sicher sind.</p>
  <p>Bevor Sie weitermachen, sollten Sie auf der <a href="../Introduction/The_Start_Page.htm">Startseite</a> ein neues Projekt erstellen (entweder <span class="notranslate">GML</span> oder <span class="notranslate">DnD™</span>) und ein paar Sprites sowie ein oder zwei Objekte hinzufügen (oder erstellen) - denn wir werden Ihnen einige
    Code, den Sie damit testen können - und stellen Sie sicher, dass das Projekt einen Raum hat, in dem Sie Instanzen platzieren können. Machen Sie sich nicht zu viele Gedanken darüber, wie die Sprites, die Sie erstellen, aussehen, denn auch ein einfaches weißes Quadrat reicht aus, und wenn Sie alles fertig haben
    können Sie mit der Arbeit an den unten aufgeführten Beispielen beginnen.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">Bewegung in Richtung der Maus</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Eine der einfachsten Möglichkeiten, ein Objekt in Bewegung zu bringen und mit dem Spieler zu interagieren, ist die Verwendung der Maus. In diesem Beispiel zeigen wir Ihnen, wie Sie mit einfachem Code ein Objekt dazu bringen können, sich dorthin zu bewegen, wo der Benutzer mit der linken Maustaste geklickt hat
      <img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png"> .</p>
    <p class="dropspot">Öffnen Sie zunächst ein Objekt, weisen Sie ihm ein Sprite zu und geben Sie ihm ein <strong>Global Left Mouse Down-Ereignis</strong>:</p>
    <p class="dropspot"><img alt="Adding The Mouse Left Button Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_GlobalLMBDownEvent.png" /></p>
    <p class="dropspot">Wir verwenden die <strong>globalen </strong>Mausereignisse, weil sie einen Klick überall im Raum erkennen, während die regulären Mausereignisse nur dann einen Klick erkennen, wenn die Maus tatsächlich innerhalb des <a class="glossterm" data-glossterm="Begrenzungsrechteck" href="#">Begrenzungsrahmens der</a> Instanz klickt. In diesem Ereignis wollen wir dieses <span class="notranslate">DnD™</span>oder <span class="notranslate">GML</span> hinzufügen:</p>
    <p class="dropspot"><img alt="DnD To Move Instance Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_1.png" /></p>
    <p class="code">move_towards_point(mouse_x, mouse_y, 2);</p>
    <p class="dropspot">Hier sagen wir der Instanz, dass sie sich zu einer Position auf dem Bildschirm bewegen soll, in diesem Fall zu den Positionen &quot;<span class="inline">mouse_x</span>&quot; und &quot;<span class="inline">mouse_y</span>&quot; (&quot;<span class="inline">mouse_x</span>&quot;
      und &quot;<span class="inline">mouse_y</span>&quot; sind eingebaute <strong>Variablen </strong> <a class="glossterm" data-glossterm="variabel" href="#">, die</a>immer die aktuelle Position des Mauszeigers enthalten). Das <span class="notranslate">DnD™</span>
      tut dies, indem es die &quot;<span class="inline">direction</span>&quot; und &quot; <span class="inline">speed</span>&quot; setzt. <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm"><strong>Instanz-Variablen</strong></a>,
      während das <span class="notranslate">GML</span> dies über die Funktion <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm"><span class="inline">move_towards_point()</span></a> (diese setzt auch die Variablen <span class="inline">speed </span>und
      <span class="inline">direction </span> Variablen, nur in einer einzigen, einfach zu bedienenden Funktion).</p>
    <p class="dropspot">Platzieren Sie eine Instanz dieses Objekts in einem Raum und drücken Sie dann die Play-Taste <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">, und klicken Sie dann auf <img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png"> um den Raum herum.
      in den Raum, damit sich die Instanz in Richtung der Maus bewegt:</p>
    <p class="dropspot"><img alt="Animation Of Instance Moving Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_1.gif">Großartig! Die Instanz des Objekts bewegt sich nun dorthin, wo Sie geklickt haben, und wenn Sie die Taste gedrückt halten, folgt die Instanz
      dem Mauszeiger einfach weiter folgen. Allerdings gibt es ein Problem... Nachdem Sie einmal geklickt und losgelassen haben, bewegt sich die Instanz weiter und verlässt schließlich den Raum! Es gibt mehrere Möglichkeiten, dies zu beheben, und welche Sie wählen
      Welche Sie wählen, hängt davon ab, was Sie tun wollen, aber die einfachste Lösung für jetzt ist, einfach ein <strong>globales Maustastenfreigabe-Ereignis</strong> hinzuzufügen, also fügen Sie das jetzt dem Objekt hinzu und geben Sie ihm diesen Code:</p>
    <p class="dropspot"><img alt="DnD To Set The Instance Speed" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_2.png" /></p>
    <p class="code">Geschwindigkeit = 0;</p>
    <p class="dropspot">Damit folgt die Instanz dem Mauszeiger nur so lange, wie Sie die Maustaste gedrückt halten, und wenn Sie die Taste loslassen, hört sie auf, sich zu bewegen. Drücken Sie Play <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> und testen Sie es jetzt.</p>
    <p class="dropspot">Bevor wir dieses Beispiel verlassen, gibt es noch ein letztes Problem, das wir lösen müssen... Wenn Sie klicken und die Maustaste <em>gedrückt halten </em>, aber den Cursor nicht bewegen, dann bewegt sich die Instanz auf den Cursor zu und &quot;vibriert&quot; dann um ihn herum.
      Das liegt daran, dass sich die Instanz schneller als 1 Pixel auf einmal bewegt und so die Position &quot;überschießt&quot; und dann versucht, sich zurück zu bewegen, und dann wieder überschießt, usw... (stellen Sie die Bewegungsgeschwindigkeit auf 5 oder so ein, um das Problem zu sehen, falls
      es nicht sofort offensichtlich ist).</p>
    <p class="dropspot"><img alt="Animation Showing Instance Vibrating" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_2.gif">Um dies zu lösen, müssen wir dem Objekt mit diesem Code ein <strong>Step-Event</strong> hinzufügen:</p>
    <p class="dropspot"><img alt="DnD Actions For The Step Event" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_3.png" /></p>
    <p class="code">var _dist = point_distance(x, y, mouse_x, mouse_y);<br> if _dist &lt;= speed<br> {<br> speed = 0;<br> }</p>
    <p class="dropspot">Hier prüfen wir einfach den Abstand zwischen der Instanz und der Mausposition, und wenn er gleich oder kleiner als die aktuelle Geschwindigkeit ist, setzen wir die Geschwindigkeit auf 0. Dadurch wird die Instanz angehalten, wenn sie nahe genug an der Mausposition ist, und wir bekommen nicht
      dieses unangenehme &quot;vibrierende&quot; Problem.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">4-Wege- und 8-Wege-Bewegung mit der Tastatur</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot"><a href="What_Is_Programming_.htm">Gleich zu Beginn dieses Handbuchs</a> haben wir Ihnen den folgenden <span class="notranslate">DnD™-</span>und <span class="notranslate">GML-Code</span> gezeigt, um eine Instanz bei jedem Spielschritt um zwei Pixel nach rechts zu verschieben:</p>
    <p class="dropspot"><img alt="DnD Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
    <p class="code">x = x + 2;</p>
    <p class="dropspot">Diese Art der Bewegung wird als <strong>Positionsbewegung </strong>bezeichnet, da wir im Wesentlichen die Instanz aufnehmen und sie jedes Mal, wenn der Code ausgeführt wird, an einer neuen Position wieder ablegen. In diesem Beispiel werden wir Ihnen zeigen, wie Sie
      diese Art der Bewegung verwenden, um eine Instanz in 4 Richtungen zu bewegen: nach oben, unten, links und rechts.</p>
    <p class="dropspot">Zunächst öffnen wir ein Objekt und weisen ihm ein Sprite zu. Nun könnten wir an dieser Stelle verschiedene <strong>Tastaturereignisse</strong> einfügen und in jedem die Instanz in die gewünschte Richtung bewegen lassen, aber wir wollen, dass sich der Spieler nur in eine Richtung bewegen kann
      Wir möchten jedoch, dass sich der Spieler immer nur in eine Richtung bewegen kann, und dies nur mit den Tastaturereignissen zu tun, ist etwas komplizierter, als es mit Code zu tun. Stattdessen werden wir das <strong>Schritt-Ereignis</strong> verwenden <strong>-</strong> das Sie jetzt zum Objekt hinzufügen sollten - mit dem folgenden
     <span class="notranslate">DnD™</span>oder <span class="notranslate">GML</span>, um die Pfeiltasten zum Bewegen zu verwenden:</p>
    <p class="dropspot"><img alt="DnD Step Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_1.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br> {<br> x = x - 2;<br> } <br> sonst if keyboard_check(vk_right)<br> {<br> x = x + 2;<br> } <br> sonst if keyboard_check(vk_up)<br> {<br> y = y - 2;<br> } <br> else if keyboard_check(vk_down)<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot">Wir verwenden eine &quot; <span class="inline">if... else if... else if...</span>&quot;-Struktur, um sicherzustellen, dass sich die Instanz jeweils nur in eine Richtung bewegen kann, also nur nach oben, unten, links oder rechts, aber nicht
      diagonal. Platzieren Sie eine Instanz des Objekts in einem Raum und drücken Sie die <strong>Play-Taste </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">, um es jetzt zu testen! Wenn alles richtig gelaufen ist, sollten Sie etwas haben
      wie dieses:</p>
    <p class="dropspot"><img alt="Animation Showing 4-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_1.gif" /></p>
    <p class="dropspot">Wir können diesen Code auch leicht modifizieren, um die 4-Wege-Bewegung in eine 8-Wege-Bewegung umzuwandeln... entfernen Sie einfach die &quot; <span class="inline">else</span>&quot; Befehle aus den Codeblöcken, so dass alles wie folgt aussieht:</p>
    <p class="dropspot"><img alt="DnD Step Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_2.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br> {<br> x = x - 2;<br> } <br> if keyboard_check(vk_right)<br> {<br> x = x + 2;<br> } <br> if keyboard_check(vk_up)<br> {<br> y = y - 2;<br> } <br> if keyboard_check(vk_down)<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot">Wenn Sie jetzt auf die <strong>Wiedergabetaste </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> drücken, sieht es in etwa so aus:</p>
    <p class="dropspot"><img alt="Animation Showing 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_2.gif" /></p>
    <p class="dropspot">Eine letzte Sache, die für Benutzer, die mit GML kodieren, erwähnenswert ist.. <span class="notranslate">.</span> Bei der Verwendung von <span class="notranslate">DnD™</span>können Sie die zu verwendende Tastaturtaste aus einer Dropdown-Liste auswählen, aber mit <span class="notranslate">GML</span> ist das nicht so einfach. Es gibt eine Reihe von <a href="../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">Tastaturkonstanten</a>, die
      Sie verwenden können - wie die im obigen Code gezeigten Konstanten für die Pfeiltasten - aber es gibt <em>keine </em>Konstanten für die alphanumerischen Tasten. Diese werden etwas anders gehandhabt und erfordern die Verwendung der Funktion <a href="../GameMaker_Language/GML_Reference/Strings/ord.htm"><span class="inline">ord()</span></a>.
      Der folgende Code zeigt Ihnen, wie dies mit WASD anstelle der Pfeiltasten funktionieren würde:</p>
    <p class="code">if keyboard_check(ord(&quot;A&quot;))<br> {<br> x = x - 2;<br> } <br> if keyboard_check(ord(&quot;D&quot;))<br> {<br> x = x + 2;<br> } <br> if keyboard_check(ord(&quot;W&quot;))<br> {<br> y = y - 2;<br> } <br> if keyboard_check(ord(&quot;S&quot;))<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">Gamepad-Bewegung</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Wir haben die Mausbewegung und die Tastaturbewegung behandelt, also ist es an der Zeit, die <strong>Gamepad-Bewegung </strong>zu behandeln. Wir werden das D-Pad nicht behandeln, da es im Grunde genauso funktioniert wie die Tastatur (ändern Sie einfach die Tastatur
      Funktionen im obigen Beispiel für <a href="../GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm"><span class="inline">gamepad_button_check()</span></a> oder <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Down.htm">Wenn Gamepad-Taste unten</a>),
      In diesem Beispiel werden wir uns also mit der Verwendung des Analogsticks für die Bewegung beschäftigen.</p>
    <p class="dropspot">Zu Beginn müssen wir das verwendete Gamepad erkennen. Gamepads erhalten einen ID-Wert von 0 bis 11. Wir werden also eine &quot; <span class="inline">for</span>&quot; Schleife verwenden, um die ID aller angeschlossenen Gamepads zu erkennen und diesen ID-Wert in einer Variablen
      für die zukünftige Verwendung. Da wir nur das erste angeschlossene Gamepad erkennen wollen und nicht alle, verwenden wir den Befehl &quot; <span class="inline">break</span>&quot;, nachdem wir ein Gamepad erkannt haben, so dass er die Schleife &quot;unterbricht&quot; (zum Beispiel
      Wenn beispielsweise das erste angeschlossene Gamepad die ID 4 hat, wird die Schleife nur 5 Mal durchlaufen, wobei die ID-Werte 0 - 4 geprüft werden und dann die Schleife abgebrochen wird, wenn das Gamepad erkannt wird). Erstellen (oder öffnen) Sie also ein Objekt, weisen Sie ihm ein Sprite zu, und fügen Sie dann
      ein <strong>Create-Ereignis</strong> mit folgendem Inhalt:</p>
    <p class="dropspot"><img alt="Getting Gamepad ID Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_1.png" /></p>
    <p class="code">gamepad_id = -1;<br> for (var i = 0; i &lt; 12; i += 1;)<br> {<br> if gamepad_is_connected(i)<br> {<br> gamepad_id = i;<br> gamepad_set_axis_deadzone(gamepad_id, 0.2);<br> break;<br> } <br> }
    </p>
    <p class="dropspot">Beachten Sie, dass wir im obigen Code die <strong> <a class="glossterm" data-glossterm="Totzone" href="#">Totzone</a> </strong>für das Gamepad einstellen. Der Grund dafür ist, dass die Analogsticks der verschiedenen Gamepad-Marken unterschiedlich empfindlich sind.
      können sie so empfindlich sein, dass sie, wenn Sie keine Deadzone einstellen, unerwünschte Bewegungen in Ihren Spielen verursachen können. Also setzen wir die Deadzone auf einen Wert wie 0,2, um <span class="notranslate">GameMaker Studio 2</span> anzuweisen, alle Gamepad-Stick-Werte unter diesem <a class="glossterm" data-glossterm="absolut" href="#">absoluten</a> Wert zu ignorieren.</p>
    <p class="dropspot">Um die eigentliche Bewegung hinzuzufügen, benötigen wir ein <strong>Schritt-Ereignis, also</strong> fügen Sie das jetzt hinzu und geben Sie ihm das folgende DnD™ oder GML:</p>
    <p class="dropspot"><img alt="Get Gamepad Input Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_2.png" /></p>
    <p class="code">if gamepad_id &gt; -1<br> {<br> var _h = gamepad_axis_value(gamepad_id, gp_axislh);<br> var _v = gamepad_axis_value(gamepad_id, gp_axislv);<br> x += _h * 4;<br> y += _v * 4;<br> }</p>
    <p class="dropspot">Hier prüfen wir den <em>linken </em>Knüppel auf horizontale oder vertikale Bewegung. Die Achsenfunktionen geben einen Wert zwischen -1 und 1 zurück, so dass für die horizontale Achse -1 für links, 0 für nicht bewegen und 1 für rechts steht, und für die vertikale Achse ist es -1 für
      aufwärts, 0 für nicht bewegen und 1 für abwärts. Beachten Sie auch, dass die Werte <em>zwischen </em>-1 und 1 liegen, so dass - zum Beispiel - die horizontale Achse einen Wert von 0,5 zurückgeben könnte, was bedeutet, dass der Knüppel auf halbem Weg zwischen der &quot;Ruheposition&quot; und ganz nach rechts geschoben ist
      nach rechts. Aus diesem Grund multiplizieren wir den Wert mit 4 (Sie können mit jedem beliebigen Wert multiplizieren, je nachdem, wie schnell sich die Instanz bewegen soll) - das bedeutet, dass die Geschwindigkeit der Instanz variiert, je nachdem, wie viel Bewegung auf der
      auf der Stick-Achse gemacht wurde.</p>
    <p class="dropspot">Platzieren Sie eine Instanz dieses Objekts in einem Raum und drücken Sie die <strong>Play-Taste </strong><strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"></strong>und bewegen Sie sich dann mit dem linken Stick Ihres angeschlossenen
      Gamepads. Sie sollten etwas wie dieses sehen:</p>
    <p class="dropspot"><img alt="Animation Showing Gamepad Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_3_1.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">Erweiterte 8-Wege-Bewegung</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">In diesem letzten Beispiel werden wir unseren Code für die 8-Wege-Bewegung erneut betrachten und ein Problem beheben, das darin besteht, dass die diagonale Bewegung tatsächlich schneller ist als die Bewegung nach oben/unten/links/rechts. Das liegt einfach daran, dass Sie sich bei einer diagonalen Bewegung
      entlang der Hypotenuse eines rechtwinkligen Dreiecks bewegen, das durch die x/y-Bewegungswerte gebildet wird:</p>
    <p class="dropspot"><img alt="Image Showing Why Diagonal Movement Is Faster" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_1.png" /></p>
    <p class="dropspot">Um deutlicher zu machen, was passiert, entfernen wir den ganzen Text und die Sprites und zeigen einfach dieselbe Bewegungslinie um 45° gedreht, so dass sie horizontal ist:</p>
    <p class="dropspot"><img alt="Simplified Image SHowing Diaginal Movement Is Faster" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_2.png" /></p>
    <p class="dropspot">Wie Sie sehen können, ist der Unterschied ziemlich offensichtlich, und wenn sich die Instanz mehr als 1 oder 2 Pixel pro Schritt bewegt, dann wird es sehr auffällig, dass die diagonale Bewegung <em>viel </em>schneller ist! Wie können wir dies also begrenzen? Es gibt eine Reihe von Möglichkeiten, dies zu tun
      Es gibt mehrere Möglichkeiten, dies zu tun, aber wir werden uns auf eine davon konzentrieren, weil sie eine Reihe von Funktionen und Konzepten einführt, die Ihnen später in Ihren Spielen nützlich sein werden.</p>
    <p class="dropspot">Um dies zu bewerkstelligen, müssen wir die Eingabewerte der unabhängig voneinander gedrückten Tasten in<span class="glossextra">Variablen</span> speichern und diese dann prüfen und entsprechend
      der Kombination der gedrückten Tasten bewegen. Dazu benötigen Sie also ein Objekt, dem ein Sprite zugewiesen ist, und Sie müssen ihm ein <strong>Step-Event mit</strong> folgendem DnD™ <span class="notranslate">oder</span>GML geben:</p>
    <p class="dropspot"><img alt="DnD Step Event Actions To Define Movement Variables" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_4_1.png" /></p>
    <p class="note"><strong>HINWEIS</strong>: Wir haben das DnD™ oben auf zwei Spalten aufgeteilt, um es einfacher zu visualisieren, aber im DnD™-Editor wird es fortlaufend platziert.</p>
    <p class="code">var _left = keyboard_check(vk_left);<br> var _right = keyboard_check(vk_right);<br> var _up = keyboard_check(vk_up);<br> var _down = keyboard_check(vk_down);<br> var _hspd = _right - _left;<br> var _vspd = _down - _up;</p>
    <p class="dropspot">Wir müssen noch etwas mehr Code hinzufügen, um uns tatsächlich zu bewegen, aber bevor wir das tun, lassen Sie uns das noch ein wenig erklären. Wir wollen links/rechts/oben/unten in äquivalente horizontale und vertikale Geschwindigkeitswerte umwandeln, also erhalten wir den Wert jeder
      Taste und führen dann einige grundlegende mathematische Berechnungen durch, um die Geschwindigkeitswerte zu erhalten. Das funktioniert, weil die Prüfaktion oder -funktion &quot;1&quot; zurückgibt, wenn eine Taste gedrückt wird, und wenn sie nicht <em>gedrückt wird, </em>gibt die Funktion &quot;0&quot; zurück.
      0. Wenn also - zum Beispiel - die rechte Taste gedrückt wird, haben Sie &quot;1 - 0 = 1&quot; für die &quot; <span class="inline">_hspd</span>&quot;, und wenn die linke Taste gedrückt wird, haben Sie &quot;0 - 1 = -1&quot; für die &quot; <span class="inline">_hspd</span>&quot;.
      (und wenn beide gedrückt werden, ist es &quot;1 - 1 = 0&quot;, so dass sich die Instanz nicht bewegt). Denken Sie daran, dass wir in einem <span class="notranslate">GameMaker Studio 2-Raum</span> für eine Bewegung nach rechts zur Position <span class="inline">x </span>addieren und für eine Bewegung nach links subtrahieren, so dass dieser
      Code gibt uns einen positiven oder negativen Wert, den wir addieren oder subtrahieren können, um uns je nach Tastatureingabe horizontal oder vertikal zu bewegen.</p>
    <p class="dropspot">Jetzt können wir den Code hinzufügen, der die Instanz tatsächlich bewegt, also - immer noch im <strong>Step-Event</strong> und nach dem obigen Code - fügen Sie Folgendes hinzu:</p>
    <p class="dropspot"><img alt="DnD Step Event Actions To Move The Instance" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_4_2.png" /></p>
    <p class="code">if (_hspd != 0 || _vspd != 0)<br> {<br> var _spd = 4;<br> var _dir = point_direction(0, 0, _hspd, _yspd);<br> var _xadd = lengthdir_x(_spd, _dir);<br> var _yadd = lengthdir_y(_spd, _dir);<br> x = x + _xadd;<br> y
      = y + _yadd;<br> }</p>
    <p class="dropspot">Der obige Code prüft zunächst, ob einer der beiden <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdrücke</a>wahr ist, d. h. ob die Variablen für die horizontale oder vertikale Geschwindigkeit nicht 0 sind. Beachten Sie, dass die &quot;
      <span class="inline">if</span> &quot; GML-Prüfung das Symbol &quot; <span class="inline">||</span>&quot; verwendet. Dies bedeutet beim Programmieren &quot; <span class="inline">or</span>&quot;, also - im Klartext - Sie prüfen</p>
    <p class="code">wenn die Variable _hspd ungleich Null ist <strong>oder </strong>wenn die Variable _vspd ungleich Null ist</p>
    <p class="dropspot">Sie können auf diese Weise mehrere Ausdrücke in &quot; <span class="inline">if</span>&quot; Checks aneinanderreihen, und es gibt mehrere verschiedene Möglichkeiten, wie diese Ausdrücke ausgewertet werden können (weitere Informationen finden Sie <strong>hier</strong> im Abschnitt über Ausdrücke).</p>
    <p class="dropspot">Der nächste Abschnitt des Codes speichert einen Wert für die aktuelle Bewegungsgeschwindigkeit in einer Variablen und erhält dann eine Richtung unter Verwendung der Werte <span class="inline">_hspd </span>und <span class="inline">_vspd </span>, die -1, 0 oder 1 sein können. Die Richtungsfunktion
      prüft von (0, 0) aus, da wir keine Raumkoordinaten verwenden, sondern eine Richtung von 0° bis 360° basierend auf den Variablenwerten auswerten wollen. Das folgende Diagramm veranschaulicht das Geschehen besser als der Versuch, es in
      Worten zu erklären:</p>
    <p class="dropspot"><img alt="Example Image Showing Direction Around (0,0) Origin" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_3.png" /></p>
    <p class="note"><strong>HINWEIS</strong>: Die Richtung wird in <span class="notranslate">GameMaker Studio 2</span> <strong>gegen den Uhrzeigersinn</strong> berechnet, d. h. 0° und 360° sind nach rechts, 90° ist nach oben, 180° ist nach rechts und 270° ist nach unten.</p>
    <p class="dropspot">Schließlich verwenden wir die <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="inline">lengthdir_x()</span></a> und <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="inline">lengthdir_y()</span></a> Funktionen
      um die Variable tatsächlich zu verschieben. Diese sind <strong> <a class="glossterm" data-glossterm="Vektor" href="#">Vektor</a>  </strong>Funktionen, die eine Länge (Abstand) und eine Richtung annehmen und dann die neue Position auf der gegebenen Achse basierend auf diesen Werten berechnen
      Werte die neue Position auf der gegebenen Achse berechnen (siehe die Funktionsbeschreibungen für eine genauere Erklärung).</p>
    <p class="dropspot">Das ist eine Menge auf einmal, und machen Sie sich keine Sorgen, wenn Sie nicht ganz alles verstehen! Das werden Sie mit der Zeit! Jetzt müssen Sie nur noch eine Instanz dieses Objekts zu einem Raum hinzufügen und dann die Play-Taste drücken <strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"></strong>,
      und Sie sollten eine seidenweiche 8-Wege-Bewegung erhalten, ohne eines der Probleme, die mit der diagonalen Bewegung verbunden sind:</p>
    <p class="dropspot"><img alt="Animation Showing Improved 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_4.gif" /></p>
  </div>
  <p> </p>
  <p>Mit diesen Beispielen - und den vorangegangenen zum Zeichnen - haben Sie hoffentlich genug verstanden, um mit der Erstellung eigener Projekte zu beginnen! Die letzte Seite dieser Kurzanleitung enthält eine Zusammenfassung des Gelernten sowie
    sowie Links zu weiteren Lernmaterialien.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Content.htm">Index</a></div>
        <div style="float:right">Weiter: <a href="Summary.htm">Zusammenfassung</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Movement
Controls
Movement and Controls
Movement Examples
Controls Examples
-->
  <!-- TAGS
qs_movement_controls
-->

</body></html>