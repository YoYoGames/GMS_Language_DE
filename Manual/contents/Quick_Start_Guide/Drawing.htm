<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Zeichnung</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and DnD to show people how things are drawn." />
  <meta name="rh-index-keywords" content="Quick Start - Drawing" />
  <meta name="search-keywords" content="drawing,draw event,GUI layer" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Zeichnung</h1>
  <p>Dieser Abschnitt (und der folgende Abschnitt über <a href="Movement_And_Controls.htm">Bewegung und Steuerung</a>) soll Ihnen praktische Beispiele für <span class="notranslate">GML</span> oder <span class="notranslate">DnD™</span>geben, damit Sie möglichst schnell mit der Erstellung Ihrer ersten Spielprojekte beginnen können. Wir
    Wir werden nicht zu sehr in die Tiefe gehen, da wir wollen, dass Sie so schnell wie möglich mit der Entwicklung beginnen können, daher möchten wir Sie ermutigen, alle Links zu erkunden und die Suchfunktion des Handbuchs zu nutzen, um nach zusätzlichen Informationen zu suchen, wenn Sie sich nicht sicher sind.
    Informationen zu suchen, wenn Sie sich nicht sicher sind.</p>
  <p>In diesem Abschnitt werden wir uns auf das einfache Zeichnen von Informationen auf den Bildschirm konzentrieren, sowohl als Text als auch als Bild, und außerdem ein wenig mehr über die verschiedenen <strong>Zeichenereignisse</strong> erklären <strong>,</strong> insbesondere das Hauptereignis "Zeichnen
    und das <strong>Draw-GUI-Ereignis </strong>(beachten Sie, dass Sie in einigen Beispielen weitere Ereignisse hinzufügen müssen, aber wir werden diese erklären, wenn wir zu ihnen kommen).</p>
  <p><img alt="The Draw Events" class="center" src="../assets/Images/QS_Guide/QS_DrawEvents.png" /></p>
  <p>Bevor Sie weitermachen, sollten Sie auf der <a href="../Introduction/The_Start_Page.htm">Startseite</a> ein neues Projekt erstellen (entweder <span class="notranslate">GML</span> oder <span class="notranslate">DnD™</span>) und ein paar Sprites sowie ein oder zwei Objekte hinzufügen (oder erstellen), da wir Ihnen einige
    Code, den Sie mit diesen testen können. Sogar ein weißes Quadrat wird für den Moment als Sprite für unser Objekt funktionieren!</p>
  <p>Wie im Abschnitt über <a href="Objects_And_Instances.htm">Objekte und Instanzen</a> erwähnt, zeichnet GameMaker <span class="notranslate">Studio 2</span> standardmäßig, wenn Sie dem Objekt kein Draw-Ereignis hinzufügen, d. h., wenn dem Objekt ein Sprite zugewiesen ist, wird dieses
    Sprite gezeichnet wird, komplett mit allen Transformationen, die hinzugefügt wurden. Was meinen wir mit Transformationen? Nun, jedes Objekt hat eine Reihe von eingebauten<span class="glossextra">Variablen</span>, die steuern, wie eine Instanz des Objekts sein Sprite beim Standardzeichnen zeichnet, und Sie können diese Variablen ändern, während das Spiel läuft, um die Art und Weise zu ändern, wie das Sprite gezeichnet wird.</p>
  <p class="note"><strong>HINWEIS</strong>: Eine Liste aller eingebauten Variablen, die zum Transformieren von Instanz-Sprites verwendet werden können, finden Sie <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">hier</a>.
   <span class="notranslate">Drag and Drop™-Benutzer</span>haben einige spezielle Aktionen, die sich auf diese Variablen auswirken, die Sie <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">hier</a> finden können, und Sie können auch die eigentlichen Variablen selbst zusammen mit
    den Aktionen " <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">Instanzvariable holen</a> " und " <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">Instanzvariable setzen</a> ".</p>
  <p>Schauen wir uns einige Beispiele an:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">Ändern von Alpha (Transparenz)</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Der <strong>Alphawert </strong>steuert die Transparenz dessen, was gezeichnet wird, und in GameMaker <span class="notranslate">Studio 2</span> können Sie die eingebaute Variable <span class="inline">image_alpha</span> verwenden, um zu ändern, wie transparent das zugewiesene Sprite ist. Um
      zu sehen, wie das funktioniert, öffnen (oder erstellen) Sie ein Objekt, weisen Sie ihm ein Sprite zu und geben Sie dem Objekt dann ein <strong>Create-Event</strong>. Fügen Sie im Ereignis "Create" einfach den folgenden <span class="notranslate">DnD™-</span>oder <span class="notranslate">GML-Text</span> hinzu:</p>
    <p class="dropspot"><img alt="DnD Draw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png" /></p>
    <p class="code">var _val = random(1);<br> image_alpha = _val;</p>
    <p class="dropspot">Bild-Alpha wird als ein Wert von 0 bis 1 berechnet, wobei 0 völlig transparent und 1 völlig undurchsichtig ist (standardmäßig ist er auf 1 gesetzt). In diesem Beispiel wird also lediglich der Alphawert des Bildes auf einen zufälligen Dezimalwert zwischen 0 und 1 gesetzt. Platzieren Sie ein
      einige Instanzen dieses Objekts in einem Raum und klicken Sie dann auf die Schaltfläche " <strong>Play </strong>" <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> oben in der IDE.</p>
    <p class="dropspot">Sie sollten sehen, dass jede Instanz des Objekts ihr Sprite mit einer anderen Transparenz zeichnet, z. B:</p>
    <p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">Ändern der Farbmischung (Tönung)</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">Wenn Ihr Objekt standardmäßig ein Sprite zeichnet, wird dieses Sprite tatsächlich mit einer Farbe <strong>überblendet </strong>(oder <strong>getönt</strong>) gezeichnet, und dieser Farbwert wird in der eingebauten Variablen <span class="inline">image_blend</span> gespeichert.
      Standardmäßig ist diese Farbe weiß, was im Wesentlichen bedeutet, dass dem Sprite keine Farbe hinzugefügt wird, wenn es auf dem Bildschirm angezeigt wird. Sie können jedoch andere Farben verwenden, um spezielle Effekte zu erzielen, z. B. Rot, um anzuzeigen, dass die Instanz
      Schaden genommen hat.</p>
    <p class="dropspot">In diesem Beispiel werden wir verschiedene Farben mit dem Sprite überblenden, während eine Taste gedrückt und gehalten wird. Deshalb müssen Sie ein Objekt öffnen (oder erstellen), ihm ein Sprite zuweisen und dann dem Objekt ein Key Down <strong>&lt;Space&gt; Event</strong> geben <strong>.</strong></p>
    <p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">Fügen Sie in diesem Key-Down-Event das folgende <span class="notranslate">DnD™-</span>oder <span class="notranslate">GML-Element</span> hinzu:</p>
    <p class="dropspot"><img alt="DnD Example Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png" /></p>
    <p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);<br> image_blend = _col;</p>
    <p class="dropspot">Platzieren Sie ein paar Instanzen dieses Objekts in einem Raum und klicken Sie dann auf die Play-Schaltfläche <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> oben in der IDE und testen Sie, ob Sie die <em>Leertaste </em>gedrückt halten und wieder loslassen können. Sie
      Sie sollten sehen, dass jede Instanz ihre Farbe schnell ändert, während die Taste gedrückt gehalten wird, und dass sie aufhört, sich zu ändern, wenn die Taste losgelassen wird:</p>
    <p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">Skala ändern</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Eine weitere Eigenschaft, die wir für unser Sprite ändern können, ist der <strong>Skalierungswert </strong>, der es uns erlaubt, es größer oder kleiner zu zeichnen, wann immer wir wollen. Die Skalierung wird unabhängig voneinander entlang der X- und Y-Achse von zwei separaten Variablen berechnet, der
      <span class="inline">image_xscale</span> und die Variable <span class="inline">image_yscale</span>. Standardmäßig sind diese auf 1 gesetzt und wirken wie <strong>Multiplikatoren</strong>, d. h. ein Wert von 0,5 wäre die halbe Skala und ein Wert von 2 wäre die doppelte Skala.</p>
    <p class="note"><strong>WICHTIG! </strong>Wenn Sie den zugewiesenen Sprite-Maßstab mithilfe dieser Variablen ändern <strong>, wird auch die Größe des Begrenzungsrahmens entsprechend geändert</strong>, was bedeutet, dass der Kollisionserkennungsbereich für das Sprite ebenfalls skaliert wird.</p>
    <p class="dropspot">In diesem Beispiel werden wir einige einfache mathematische Verfahren verwenden, um eine Instanz das Sprite in einer Schleife nach oben und unten zu skalieren. Öffnen (oder erstellen) Sie zunächst ein Objekt, weisen Sie ihm ein Sprite zu und geben Sie dem Objekt dann ein <strong>Create-Event</strong>. In diesem
      Ereignis fügen Sie das Folgende hinzu:</p>
    <p class="dropspot"><img alt="DnD Set Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png" /></p>
    <p class="code">Timer = 0;</p>
    <p class="dropspot">Fügen Sie nun dem Objekt ein <strong>Step-Event</strong> hinzu mit:</p>
    <p class="dropspot"><img alt="DnD Actions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png" /></p>
    <p class="code">timer = timer + 1;<br> var _val = dsin(timer);<br> image_xscale = 1 + _val;<br> image_yscale = 1 + _val;</p>
    <p class="dropspot">Hier verwenden wir die Mathefunktion <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a> einen Wert zwischen -1 und 1 mit Hilfe der Timer-Variablen und wenden ihn dann auf die
      auf die Scale-Variablen an. Nachdem Sie einige Instanzen in einem Raum platziert und die <strong>Play-Taste </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> gedrückt haben, sollten Sie sehen, wie die Instanzen von 0 auf 2 und wieder zurück skalieren.
      von einer Skala von 0 zu einer Skala von 2 und dann wieder zurück.</p>
    <p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling" /></p>
    <p class="dropspot">Eine letzte Sache... ändern Sie den Abschnitt &quot; <span class="inline">image_yscale</span>&quot; in &quot; <span class="inline">1 - _val</span>&quot; und sehen Sie, was passiert!</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>Die obigen Beispiele illustrieren nur einige der vielen Möglichkeiten, wie Sie das Objekt-Sprite manipulieren können, wenn <span class="notranslate">GameMaker Studio 2</span> standardmäßig zeichnet, aber was ist, wenn Sie mehr als eine Sache für ein Objekt zeichnen möchten? In diesen Fällen müssen Sie das <strong>Draw-Ereignis</strong> verwenden, um <span class="notranslate">GameMaker Studio 2</span> explizit mitzuteilen, was gezeichnet werden soll, was wir in den folgenden Beispielen tun werden.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">Zeichnen von zwei (oder mehr) Sprites zusammen</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">Für dieses Beispiel benötigen Sie zwei Sprites und ein Objekt. Nennen Sie die Sprites &quot; <span class="inline">spr_One</span>&quot; und &quot; <span class="inline">spr_Two</span>&quot;, und setzen Sie dann den &quot; <span class="inline">spr_One</span>&quot;
      auf die Mitte und für &quot; <span class="inline">spr_Two</span>&quot; setzen Sie den Ursprung auf die linke Mitte:</p>
    <p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png">Weisen Sie das erste Sprite (&quot; <span class="inline">spr_One</span>&quot; mit dem Ursprung in der Mitte) dem von Ihnen erstellten Objekt zu und fügen Sie dann
      ein Ereignis <strong>erstellen</strong>. Fügen Sie im "Create Event" das folgende <span class="notranslate">DnD™</span>oder <span class="notranslate">GML</span> hinzu:</p>
    <p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png" /></p>
    <p class="code">draw_angle = 0;</p>
    <p class="dropspot">Wir werden diese Variable verwenden, um &quot; <span class="inline">spr_Two</span>&quot; über die Zeit zu drehen und es über das dem Objekt zugewiesene Sprite (&quot; <span class="inline">spr_One</span>&quot;) zu zeichnen. Dazu müssen wir dem Objekt ein <strong>Draw Event </strong>
      dem Objekt hinzufügen. Damit teilen wir <span class="notranslate">GameMaker Studio 2</span> mit, dass wir übernehmen wollen, was die Instanz zeichnet, was bedeutet, dass unser Code einen Aufruf der <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a> Funktion
      oder <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>Selbst zeichnen</strong></a> Aktion enthält. Diese Aktion repliziert einfach, was das Objekt tut, wenn kein Draw-Event vorhanden ist und es standardmäßig das zugewiesene Sprite zeichnet. Wir werden
      zeichnen dann das zweite Sprite, das wir als Overlay-Sprite verwenden wollen, das sich dreht. Das <span class="notranslate">DnD™</span>und <span class="notranslate">GML</span> sieht so aus:</p>
    <p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png" /></p>
    <p class="code">draw_self();<br> draw_angle = draw_angle + 0.5;<br> draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);</p>
    <p class="dropspot">Fügen Sie eine Anzahl von Instanzen des Objekts in den Raum-Editor ein und drücken Sie dann die <strong>Play-Taste </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> oben in der <a class="glossterm" data-glossterm="IDE" href="#">IDE</a>. Wenn alles richtig gelaufen ist, sollten Sie jetzt etwas wie dieses sehen:</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif" /></p>
    <p class="dropspot">Bevor wir uns von diesem Beispiel verabschieden, wollen wir es noch ein wenig abändern. Anstatt &quot; <span class="inline">spr_Two</span>&quot; einfach zu drehen, werden wir es in Richtung der Mausposition zeigen lassen. Dazu müssen wir das Draw Event
     <span class="notranslate">DnD™</span>oder <span class="notranslate">GML</span>, damit es so aussieht:</p>
    <p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png" /></p>
    <p class="code">draw_self();<br> draw_angle = point_direction(x, y, mouse_x, mouse_y);<br> draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);</p>
    <p class="dropspot">Führen Sie das Projekt erneut aus und dieses Mal werden Sie etwas ganz anderes sehen!</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif">Das Sprite zeigt jetzt in Richtung der Maus, egal wohin Sie es bewegen! Wie Sie sehen können, ist das Überlagern von Sprites eine großartige
      Wie Sie sehen, ist das Überlagern von Sprites eine gute Möglichkeit, einem Objekt Details hinzuzufügen oder etwas unabhängig von dem dem Objekt zugewiesenen &quot;Basis&quot;-Sprite zu bewegen, und es ist ein leistungsfähiges Werkzeug, das Sie in Ihren eigenen Projekten wahrscheinlich häufig verwenden werden.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#">Zeichnen von anderen Dingen als Sprites</a></p>
  <div class="droptext" data-targetname="drop_down4">
    <p class="dropspot">Sie können im Draw-Event auch andere Dinge als Sprites zeichnen, z. B. Text oder Formen. In diesem Beispiel verwenden wir die DnD™- oder GML-Funktion <span class="inline">draw_self()</span>, um das Objekt-Sprite zu zeichnen, aber wir zeichnen auch einige andere Dinge,
      beginnend mit etwas <strong>Text</strong>. Für dieses Beispiel benötigen Sie ein Sprite und ein Objekt (dem das Sprite zugewiesen ist). Fügen Sie im Objekt zunächst ein <strong>Create-Event</strong> mit dieser <span class="notranslate">DnD™-</span>oder <span class="notranslate">GML</span>:</p>
    <p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317" /></p>
    <p class="code">name = choose(&quot;Fred&quot;, &quot;Jonas&quot;, &quot;Sharon&quot;, &quot;Kate&quot;, &quot;Frank&quot;, &quot;John&quot;, &quot;Monica&quot;, &quot;Amanda&quot;);<br> number = irandom(100);</p>
    <p class="dropspot">Damit wird <span class="notranslate">GameMaker Studio 2</span> lediglich angewiesen, einen der aufgelisteten Namen auszuwählen und ihn einer Variablen zuzuweisen sowie für jede Instanz des Objekts eine Zufallszahl von 0 bis 100 zu generieren. Wir wollen diese Werte auf den Bildschirm zeichnen, und dafür
      müssen Sie nun ein <strong>Draw-Ereignis</strong> hinzufügen und darin das folgende <span class="notranslate">DnD™</span>oder <span class="notranslate">GML</span> einfügen:</p>
    <p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png" /></p>
    <p class="code">draw_self();<br> draw_set_halign(fa_center);
      <br> draw_text(x, y + 32, &quot;Mein Name ist &quot; + name);<br> draw_text(x, y + 48, &quot;Meine Nummer ist &quot; + string(number));</p>
    <p class="dropspot">Sie werden im obigen Code bemerken, dass wir die <a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a> Funktion oder <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>Zahl in Zeichenkette</strong></a> Aktion
      auf die Variable &quot;number &quot; anwenden, die wir zeichnen möchten. Das liegt daran, dass jeder Text aus <em>Zeichen</em> und nicht aus Werten bestehen muss, und deshalb müssen wir diese Funktion/Aktion verwenden, um den Zahlenwert in die Zeichen umzuwandeln, die wir
      zeichnen wollen. In diesem Fall nehmen wir die Zufallszahl, die wir generiert haben, und wandeln sie in eine &quot;Zeichenkette&quot; von Zeichen um, die gezeichnet werden können. Beachten Sie auch, dass wir die <strong>Textausrichtung</strong> einstellen. Dies teilt <span class="notranslate">GameMaker Studio 2</span> einfach mit, wo es beginnen soll
      Dies teilt GameMaker Studio 2 einfach mit, wo es mit dem Zeichnen des Textes in Bezug auf die angegebene Position beginnen soll, und in diesem Fall soll der Text entlang der X-Achse zentriert werden.</p>
    <p class="dropspot">Fügen Sie eine Anzahl von Instanzen des Objekts in den Raum-Editor ein und drücken Sie dann die Play-Taste <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> oben in der IDE. Sie sollten etwas Ähnliches wie dies sehen:</p>
    <p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png" /></p>
    <p class="dropspot">In allen bisherigen Beispielen haben wir das der Instanz zugewiesene Sprite gezeichnet, aber das muss nicht immer der Fall sein. <strong>Sie können</strong> im Draw-Ereignis <strong>alles zeichnen, was Sie wollen</strong>, unabhängig von dem zugewiesenen Sprite. Zur Veranschaulichung
      diesen Punkt zu veranschaulichen, ändern wir den aktuellen Code, indem wir den Aufruf von <span class="inline">draw_self()</span> entfernen und durch eine Funktion zum Zeichnen einer farbigen Ellipse ersetzen, etwa so:</p>
    <p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png" /></p>
    <p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);<br> draw_set_halign(fa_center);
      <br> draw_text(x, y + 32, &quot;Mein Name ist &quot; + name);<br> draw_text(x, y + 48, &quot;Meine Nummer ist &quot; + string(number));</p>
    <p class="dropspot">Führen Sie das Projekt erneut aus und Sie sollten dies sehen:</p>
    <p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png" /></p>
    <p class="dropspot">Eine wichtige Sache, die dabei zu beachten ist, ist, dass das zugewiesene Sprite zwar nicht gezeichnet wird, aber <strong>trotzdem für die Kollisionserkennung verwendet wird.</strong> Während Sie also eine Sache zeichnen, werden Kollisionen immer noch auf der Basis des zugewiesenen Sprites berechnet.
      Kollisionen anhand des zugewiesenen Sprites berechnet, als ob es zusammen mit der Instanz im Raum platziert wäre, auch wenn es nicht sichtbar ist. Das ist sehr praktisch, denn es bedeutet, dass Sie verschiedene Sprites zeichnen können, aber eine einzige <strong>Kollisionsmaske</strong> beibehalten, die auf dem
      dem zugewiesenen Sprite. Beachten Sie auch, dass Sie immer noch die verschiedenen Transformationen wie X/Y-Skalierung anwenden können und Kollisionen auf der geänderten Größe basieren, auch wenn nichts gezeichnet wird, um dies zu zeigen.</p>
  </div>
  <p> </p>
  <p> </p>
  <h1>Die GUI-Schicht</h1>
  <p>Wir haben oben auf der Seite erwähnt, dass wir sowohl über das Draw <strong>GUI Event als auch</strong> über das Draw Event sprechen werden, also lassen Sie uns jetzt einen Blick darauf werfen. Das Draw-GUI-Ereignis arbeitet auf einem so genannten <strong> <a class="glossterm" data-glossterm="GUI" href="#">GUI-Layer</a></strong>,
    das ist eine spezielle Zeichenebene mit einer festen Breite und Höhe, die über die Instanzen im Raum gezeichnet wird. Das Tolle an der GUI-Ebene ist, dass <em> sie sich nicht mit der Raumkamera bewegt, so dass</em> sie der ideale Ort ist, um statische GUI
    Elemente hinzuzufügen, z. B. Spielstände, Gesundheitsbalken und andere Informationen, die Ihr Spiel dem Benutzer mitteilen muss. Weitere Informationen über die GUI-Ebene finden Sie im Abschnitt " <a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">Draw Events</a> 
    des Handbuchs.</p>
  <p class="note"><strong>HINWEIS</strong>: Räume können größer sein als die Bildschirmgröße, so dass Sie große Ebenen haben können, in denen sich der Spieler bewegen kann. Das bedeutet, dass Sie im Raum-Editor (oder im Code) eine <strong>Kamera </strong>definieren müssen, die dem Geschehen in Ihrem
    Spiel folgt. Dies ist im Grunde eine Möglichkeit, einen festen Bereich des Bildschirms einzurichten, um verschiedene Teile des größeren Raums anzuzeigen, basierend auf - zum Beispiel - der Position des Spielers im Raum, und wird in vielen Spielen verwendet. Denken Sie an die Art und Weise, wie die Ansicht immer der
    der Hauptfigur in klassischen Spielen wie Mario oder Zelda folgt. Das wird mit Kameras gemacht. Weitere Informationen finden Sie im Abschnitt " <a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">Raumeigenschaften"</a> im Abschnitt "Room Editor" des Handbuchs.</p>
  <p>Die folgenden Beispiele werden alle das <strong>GUI-Ereignis "Draw"</strong> verwenden, also müssen Sie ein Objekt erstellen und ihm dieses Ereignis hinzufügen. Beachten Sie, dass dem Objekt kein Sprite zugewiesen werden muss, da wir nicht standardmäßig etwas zeichnen wollen,
    noch brauchen wir es, um Kollisionen zu erkennen. Objekte wie dieses, die nur dazu gedacht sind, Dinge zu zeichnen oder bestimmte Aspekte des Spiels zu steuern, werden oft <strong>Controller-Objekte</strong> genannt. Beachten Sie auch, dass wir das gleiche Objekt für alle Beispiele verwenden werden.
    alle Beispiele verwenden werden, so dass es empfehlenswert ist, sie nacheinander durchzugehen (obwohl dies nicht unbedingt erforderlich ist).</p>
  <p><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png"> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#">Zeichnen von Text</a></p>
  <div class="droptext" data-targetname="drop_down5">
    <p class="dropspot">Wenn Sie auf die GUI-Ebene zeichnen, ist die linke obere Ecke die Ursprungsposition, und nach rechts ist +X und nach unten ist +Y. Das macht die Positionierung von Text und Grafiken sehr einfach, wie Sie in diesem Beispiel sehen werden. Alles, was wir hier tun werden, ist einen Wert zu zeichnen
      zu zeichnen, der den Punktestand des Spielers darstellt. Daher müssen wir in unserem Objekt ein <strong>"Create"-Ereignis </strong>hinzufügen <strong>, um </strong>eine Variable zu initialisieren, die diesen Wert speichert, etwa so:</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png" /></p>
    <p class="code">player_score = 0;</p>
    <p class="dropspot">Wir wollen auch ein <strong>Keyboard Down &lt;Space&gt; Event zum</strong> Objekt hinzufügen, da wir das verwenden werden, um die Punktzahl jedes Mal zu erhöhen, wenn Sie die Leertaste drücken.</p>
    <p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">In diesem Fall fügen Sie Folgendes hinzu:</p>
    <p class="dropspot"><img alt="DnD Actions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png" /></p>
    <p class="code">var _val = irandom(100);<br> player_score = player_score + _val;</p>
    <p class="dropspot">Zum Schluss zeichnen wir den Score-Wert im Draw-GUI-Event, etwa so:</p>
    <p class="dropspot">In diesem Fall fügen Sie Folgendes hinzu:</p>
    <p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png" /></p>
    <p class="code">draw_set_halign(fa_left);<br> draw_set_colour(c_yellow);
      <br> draw_text(32, 32, &quot;SCORE:&quot;);<br> draw_set_colour(c_white);
      <br> var _str = string(player_score);<br> draw_text_transformed(32, 48, _str, 2, 2, 0);</p>
    <p class="dropspot">Sie werden feststellen, dass wir fest kodierte <a class="glossterm" data-glossterm="fest codiert" href="#">(oder</a> feste) Werte für die x/y-Position des zu zeichnenden Textes verwendet haben, da wir ihn nicht relativ zu einer Instanz benötigen, da wir
      auf die GUI-Ebene. Wir haben auch die Funktion &quot;set color&quot; verwendet, um die Farbe des Textes zu ändern, sowie die Funktion &quot;transformed&quot;, um den aktuellen Punktestand größer zu machen, was zeigt, wie Sie die Textelemente in Ihren eigenen Spielen anpassen können.
      Textelemente in Ihren eigenen Spielen anpassen können.</p>
    <p class="dropspot">Fügen Sie nun eine einzelne Instanz dieses Objekts zu Ihrem Raum hinzu und drücken Sie dann die <strong>Play-Taste </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">. Wenn das Spiel läuft, drücken Sie die Taste <span class="inline">&lt;Space&gt;</span> und lassen Sie sie wieder los. Sie sollten sehen, dass sich der Punktestand erhöht.</p>
    <p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#">Zeichnen von Sprites</a></p>
  <div class="droptext" data-targetname="drop_down6">
    <p class="dropspot">In diesem Beispiel werden wir die GUI-Ebene verwenden, um einige Sprites zu zeichnen. Die naheliegendste Verwendung dafür ist das Zeichnen der Spielerleben, also machen wir genau das! Für dieses Beispiel benötigen Sie ein Sprite, das etwa 64x64 Pixel groß sein sollte
      - aber es sollte dem Objekt nicht zugewiesen werden, da wir es selbst zeichnen werden.</p>
    <p class="dropspot">Zunächst müssen wir dem Objekt im <strong>Ereignis "Create"</strong> einige neue Variablen hinzufügen (wenn Sie das vorherige Beispiel durchgeführt haben, fügen Sie das Folgende unter dem hinzu, was bereits vorhanden ist):</p>
    <p class="dropspot"><img alt="Defining Variables Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_1.png" /></p>
    <p class="code">player_lives = 3;<br> gui_w = display_get_gui_width();</p>
    <p class="dropspot">In diesem Code initialisieren wir eine Variable für die Player-Lives, aber wir erstellen auch eine Variable, um die Breite der GUI-Ebene zu halten, damit wir die Dinge korrekt relativ zum rechten Bildschirmrand positionieren können. Wir könnten einfach einen Wert fest in den Code
      verwenden, aber das würde bedeuten, dass wir, wenn wir die Größe des Raums ändern oder später Kameras usw. hinzufügen, den Code durchgehen und den Wert überall ändern müssten. Die Verwendung der <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a> Funktion
      bedeutet, dass wir uns keine Gedanken über zukünftige Änderungen machen müssen, da sich der Code automatisch an die Größe der GUI-Ebene anpasst.</p>
    <p class="dropspot">Als Nächstes möchten wir dem Objekt ein <strong>Keyboard Pressed &lt;Enter&gt; Event</strong> hinzufügen, da wir dieses verwenden werden, um die Anzahl der Leben jedes Mal zu ändern, wenn die Enter-Taste gedrückt wird:</p>
    <p class="dropspot"><img alt="Adding An Enter Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_EnterKeyPressEvent.png" /></p>
    <p class="dropspot">In diesem Fall fügen Sie Folgendes hinzu:</p>
    <p class="dropspot"><img alt="DnD In The Enter Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_2.png" /></p>
    <p class="code">player_lives = player_lives -1;<br> if player_lives &lt; 0<br> {<br> player_lives = 3;<br> }</p>
    <p class="dropspot">Schließlich müssen wir die Sprites auf das Display zeichnen. Dazu verwenden wir eine &quot; <span class="inline">for</span>&quot; Schleife (Informationen mit GML hier und <span class="notranslate">für</span> DnD™ hier).
     <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">hier</a>), zusammen mit der GUI-Breitenvariable, um alles in der oberen rechten Ecke des Bildschirms zu positionieren. Fügen Sie also folgendes in das Draw Gui Event ein (nach allen anderen Aktionen, die es möglicherweise
      aus den vorherigen Beispielen):</p>
    <p class="dropspot"><img alt="DnD Actions To Draw Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_3.png" /></p>
    <p class="code">for (var i = 0; i &lt; player_lives; i += 1;)<br> {<br> var _xx = gui_w - 48 - (i * 70);<br> draw_sprite(spr_Heart, 0, _xx, 48);<br> }</p>
    <p class="dropspot">Wenn Sie nicht bereits eine Instanz dieses Objekts zu einem Raum hinzugefügt haben, fügen Sie es jetzt hinzu (nur eine!) und drücken Sie dann die Play-Taste <img alt="Play Icon" class="icon" height="24" src="../assets/Images/Icons/Icon_PlayGame.png" width="24">. Sobald das Spiel läuft, drücken Sie mehrmals die Taste <span class="inline">&lt;Enter&gt;</span>, um zu sehen, wie sich die Leben ändern.</p>
    <p class="dropspot"><img alt="Animation Drawing Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_7.gif" /></p>
    <p class="dropspot">Bevor Sie dieses Beispiel verlassen, sollten Sie mit der Anzahl der Leben experimentieren und sehen, was passiert. Im Moment ist sie auf 3 eingestellt, aber ändern Sie das "Create"-Ereignis und das "Key Pressed"-Ereignis, um den Wert auf 5 zu setzen, oder 10... wenn Sie alles richtig gemacht haben
      richtig gemacht haben, dann sollte sich der Code anpassen und alle korrekt zeichnen!</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#">Zeichnen einer Gesundheitsleiste</a></p>
  <div class="droptext" data-targetname="drop_down7">
    <p class="dropspot">Dieses letzte Beispiel behandelt das Zeichnen einer Gesundheitsleiste auf der GUI-Ebene. Es gibt eine Reihe von Möglichkeiten, dies zu tun, aber <span class="notranslate">GameMaker Studio 2</span> hat eine eingebaute Funktion speziell für die Erstellung von Healthbars, die wir hier verwenden werden.
      Sie können aber auch Ihre eigenen mit Sprites oder Shapes erstellen. Um zu beginnen, müssen wir wie zuvor eine Variable initialisieren, die den Gesundheitswert enthält, also fügen Sie den folgenden <span class="notranslate">DnD™-</span>oder <span class="notranslate">GML-Code</span> in das <strong>Create-Ereignis</strong> des Objekts ein (nach jedem anderen Code, der bereits vorhanden ist)
      der möglicherweise bereits vorhanden ist):</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_1.png" /></p>
    <p class="code">player_health = 100;</p>
    <p class="dropspot">Wir möchten die Pfeiltasten verwenden, um den Gesundheitswert nach oben oder unten zu ändern, je nachdem, welche Pfeiltaste gedrückt wird, und wir könnten das tun, indem wir zwei " <strong>Keyboard Pressed &lt;Arrow&gt;</strong> "-Ereignisse hinzufügen, aber es ist wahrscheinlich einfacher, ein Step-Ereignis <strong>und</strong> etwas Code zu verwenden, um die Tasten zu überprüfen, also machen Sie weiter und fügen Sie <strong>jetzt</strong> ein Step-Ereignis <strong>mit</strong> dem folgenden DnD™ oder <span class="notranslate">GML</span>hinzu:</p>
    <p class="dropspot"><img alt="Step Event DnD Actions" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_2.png" /></p>
    <p class="code">if keyboard_check(vk_up)<br> {<br> if player_health &lt; 100<br> {<br> player_health = player_health + 1;<br> } <br> } <br> if keyboard_check(vk_down)<br> {<br> if player_health &gt; 0<br> {<br> player_health = player_health - 1;<br> } <br> }</p>
    <p class="dropspot">Wenn das erledigt ist, können wir uns daran machen, die Gesundheitsleiste zu zeichnen, was im Ereignis "Draw GUI" geschieht, indem wir Folgendes hinzufügen (nach allem anderen, was bereits vorhanden ist):</p>
    <p class="dropspot"><img alt="DnD For The Draw GUI Event To Draw A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_3.png" /></p>
    <p class="code">var _xx = gui_w / 2;<br> draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_white, c_red, c_lime, 0, true, true);</p>
    <p class="dropspot">Fügen Sie eine Instanz dieses Objekts zu einem Raum hinzu, falls Sie dies noch nicht getan haben (allerdings nur eine!), und drücken Sie dann die Play-Taste <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">. Sobald das Spiel läuft
      läuft, drücken Sie mehrmals die Tasten <span class="inline">&lt;Up Arrow&gt;</span> und <span class="inline">&lt;Down Arrow&gt;</span>, um zu sehen, wie sich die Gesundheit ändert.</p>
    <p class="dropspot"><img alt="Animation Of Drawing A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_8.gif" /></p>
  </div>
  <p> </p>
  <p>Wir hoffen, dass Sie nach diesen Beispielen etwas mehr Sicherheit im Umgang mit <span class="notranslate">GameMaker Studio 2</span> und ein besseres Verständnis dafür haben, wie alles funktioniert. Im nächsten Abschnitt erfahren Sie, wie Sie die Dinge, die Sie gezeichnet haben, dazu bringen, sich durch den Raum zu bewegen
    sowie Benutzereingaben akzeptieren - und darauf reagieren - können.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Content.htm">Index</a></div>
        <div style="float:right">Nächste: <a href="Movement_And_Controls.htm">Bewegung und Bedienelemente</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Drawing
Drawing Examples
Quick Start Drawing
-->
  <!-- TAGS
qs_drawing
-->

</body></html>